/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 39 generated on 2011-04-04 22:33:26.263504
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const {
        return vfree;
    }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) {
    return fabsf(f);
}
inline double IKabs(double f) {
    return fabs(f);
}

inline float IKlog(float f) {
    return logf(f);
}
inline double IKlog(double f) {
    return log(f);
}

inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
    if( f <= -1 ) return -IKPI_2;
    else if( f >= 1 ) return IKPI_2;
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
    if( f <= -1 ) return -IKPI_2;
    else if( f >= 1 ) return IKPI_2;
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
    if( f <= -1 ) return IKPI;
    else if( f >= 1 ) return 0.0f;
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
    if( f <= -1 ) return IKPI;
    else if( f >= 1 ) return 0.0;
    return acos(f);
}
inline float IKsin(float f) {
    return sinf(f);
}
inline double IKsin(double f) {
    return sin(f);
}
inline float IKcos(float f) {
    return cosf(f);
}
inline double IKcos(double f) {
    return cos(f);
}
inline float IKtan(float f) {
    return tanf(f);
}
inline double IKtan(double f) {
    return tan(f);
}
inline float IKsqrt(float f) {
    if( f <= 0.0f ) return 0.0f;
    return sqrtf(f);
}
inline double IKsqrt(double f) {
    if( f <= 0.0 ) return 0.0;
    return sqrt(f);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() {
    return 0;
}
IKFAST_API int* getFreeParameters() {
    return NULL;
}
IKFAST_API int getNumJoints() {
    return 6;
}

IKFAST_API int getIKRealSize() {
    return sizeof(IKReal);
}

IKFAST_API int getIKType() {
    return 0x67000001;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109,x110,x111,x112,x113,x114,x115,x116,x117,x118,x119,x120,x121,x122,x123,x124,x125,x126,x127,x128,x129,x130,x131,x132,x133,x134,x135,x136,x137,x138,x139,x140,x141,x142,x143,x144,x145,x146,x147,x148;
    x0=IKsin(j[0]);
    x1=IKsin(j[1]);
    x2=((0.707106781186547)*(x0)*(x1));
    x3=IKcos(j[1]);
    x4=((0.707106781186547)*(x0)*(x3));
    x5=((x2)+(x4));
    x6=IKcos(j[2]);
    x7=IKcos(j[0]);
    x8=IKsin(j[2]);
    x9=IKsin(j[3]);
    x10=((x6)*(x7));
    x11=((x5)*(x8));
    x12=((x11)+(x10));
    x13=IKcos(j[3]);
    x14=((x5)*(x6));
    x15=((x7)*(x8));
    x16=((((-1.00000000000000)*(x15)))+(x14));
    x17=IKsin(j[4]);
    x18=((x12)*(x13));
    x19=((x16)*(x9));
    x20=((x19)+(x18));
    x21=IKcos(j[4]);
    x22=((-1.00000000000000)*(x12));
    x23=((x22)*(x9));
    x24=((x13)*(x16));
    x25=((x24)+(x23));
    x26=IKcos(j[5]);
    x27=((x17)*(x20));
    x28=((-1.00000000000000)*(x25));
    x29=((x21)*(x28));
    x30=((x27)+(x29));
    x31=((-1.00000000000000)*(x30));
    x32=IKsin(j[5]);
    x33=((0.707106781186547)*(x3));
    x34=((0.707106781186547)*(x1));
    x35=((((-1.00000000000000)*(x34)))+(x33));
    x36=((x33)*(x7));
    x37=((x34)*(x7));
    x38=((x37)+(x36));
    x39=((-1.00000000000000)*(x38));
    x40=((x0)*(x6));
    x41=((x39)*(x8));
    x42=((x40)+(x41));
    x43=((x39)*(x6));
    x44=((-1.00000000000000)*(x0)*(x8));
    x45=((x44)+(x43));
    x46=((((-1.00000000000000)*(x33)))+(x34));
    x47=((x46)*(x8)*(x9));
    x48=((x13)*(x35)*(x6));
    x49=((x48)+(x47));
    x50=((x13)*(x35)*(x8));
    x51=((x35)*(x6)*(x9));
    x52=((x51)+(x50));
    x53=((x13)*(x42));
    x54=((x0)*(x8));
    x55=((x43)+(((-1.00000000000000)*(x54))));
    x56=((x55)*(x9));
    x57=((x56)+(x53));
    x58=((x17)*(x57));
    x59=((x13)*(x55));
    x60=((-1.00000000000000)*(x41));
    x61=((-1.00000000000000)*(x40));
    x62=((x60)+(x61));
    x63=((x62)*(x9));
    x64=((x59)+(x63));
    x65=((-1.00000000000000)*(x64));
    x66=((x21)*(x65));
    x67=((x58)+(x66));
    x68=((-1.00000000000000)*(x67));
    x69=((x33)+(x34));
    x70=((-1.00000000000000)*(x49));
    x71=((x21)*(x70));
    x72=((x17)*(x52));
    x73=((x72)+(x71));
    x74=((-1.00000000000000)*(x73));
    x75=((0.0707106781186548)*(x3));
    x76=((0.0707106781186548)*(x1));
    x77=((0.707106781186547)*(x17)*(x49));
    x78=((0.707106781186547)*(x21)*(x52));
    x79=((x13)*(x45));
    x80=((-1.00000000000000)*(x42));
    x81=((x80)*(x9));
    x82=((x79)+(x81));
    x83=((0.707106781186547)*(x17)*(x82));
    x84=((x45)*(x9));
    x85=((x53)+(x84));
    x86=((0.707106781186547)*(x21)*(x85));
    x87=((0.707106781186547)*(x32)*(x74));
    x88=((0.707106781186547)*(x26)*(x69));
    x89=((((-1.00000000000000)*(x37)))+(x36));
    x90=((0.707106781186547)*(x26)*(x89));
    x91=((0.707106781186547)*(x32)*(x68));
    x92=((-1.00000000000000)*(x69));
    x93=((0.707106781186547)*(x32)*(x92));
    x94=((0.707106781186547)*(x26)*(x74));
    x95=((0.707106781186547)*(x26)*(x68));
    x96=((((-1.00000000000000)*(x36)))+(x37));
    x97=((0.707106781186547)*(x32)*(x96));
    x98=((0.0141421356237309)*(x1));
    x99=((0.0141421356237309)*(x3));
    x100=((x99)+(x98));
    x101=((0.707106781186547)*(x100)*(x32));
    x102=((((-1.00000000000000)*(x75)))+(x76));
    x103=((0.707106781186547)*(x102)*(x13)*(x6));
    x104=((0.120000000000000)*(x50));
    x105=((0.120000000000000)*(x51));
    x106=((x104)+(x105));
    x107=((0.707106781186547)*(x106)*(x21));
    x108=((0.120000000000000)*(x47));
    x109=((0.120000000000000)*(x48));
    x110=((x108)+(x109));
    x111=((0.707106781186547)*(x110)*(x17));
    x112=((0.0200000000000000)*(x72));
    x113=((0.0200000000000000)*(x71));
    x114=((x113)+(x112));
    x115=((0.707106781186547)*(x114)*(x26));
    x116=((((-1.00000000000000)*(x76)))+(x75));
    x117=((0.707106781186547)*(x116)*(x8)*(x9));
    x118=((0.0848528137423857)*(x1));
    x119=((0.0848528137423857)*(x3));
    x120=((((-1.00000000000000)*(x119)))+(x118));
    x121=((0.707106781186547)*(x120)*(x6));
    x122=((0.00353553390593274)*(x3));
    x123=((0.00353553390593274)*(x1));
    x124=((((-1.00000000000000)*(x123)))+(x122));
    x125=((0.707106781186547)*(x124)*(x8));
    x126=((0.100000000000000)*(x40));
    x127=((0.100000000000000)*(x41));
    x128=((x126)+(x127));
    x129=((0.707106781186547)*(x128)*(x9));
    x130=((0.0848528137423857)*(x54));
    x131=((-1.00000000000000)*(x63));
    x132=((0.120000000000000)*(x53));
    x133=((0.120000000000000)*(x63));
    x134=((0.00353553390593274)*(x40));
    x135=((1.00000000000000)*(x118)*(x7));
    x136=((1.00000000000000)*(x119)*(x7));
    x137=((x135)+(x136));
    x138=((0.707106781186547)*(x137)*(x6));
    x139=((0.100000000000000)*(x54));
    x140=((1.00000000000000)*(x7)*(x99));
    x141=((1.00000000000000)*(x7)*(x98));
    x142=((((-1.00000000000000)*(x141)))+(x140));
    x143=((0.707106781186547)*(x142)*(x32));
    x144=((1.00000000000000)*(x122)*(x7));
    x145=((1.00000000000000)*(x123)*(x7));
    x146=((x144)+(x145));
    x147=((-1.00000000000000)*(x146));
    x148=((0.707106781186547)*(x147)*(x8));
    eerot[0]=((((x17)*(x25)))+(((x20)*(x21))));
    eerot[1]=((((x26)*(((x2)+(((-1.00000000000000)*(x4)))))))+(((x31)*(x32))));
    eerot[2]=((((x26)*(x31)))+(((x32)*(((x4)+(((-1.00000000000000)*(x2))))))));
    eetrans[0]=((-0.0100000000000000)+(((x26)*(((((0.0200000000000000)*(x27)))+(((0.0200000000000000)*(x21)*(((((-1.00000000000000)*(x24)))+(((-1.00000000000000)*(x23)))))))))))+(((x13)*(((((0.100000000000000)*(x15)))+(((-0.100000000000000)*(x14)))))))+(((x32)*(((((1.00000000000000)*(x0)*(x98)))+(((-1.00000000000000)*(x0)*(x99)))))))+(((x21)*(((((0.120000000000000)*(x18)))+(((0.120000000000000)*(x19)))))))+(((x8)*(((((1.00000000000000)*(x0)*(x122)))+(((1.00000000000000)*(x0)*(x123)))))))+(((x9)*(((((0.100000000000000)*(x10)))+(((0.100000000000000)*(x11)))))))+(((x17)*(((((0.120000000000000)*(x23)))+(((0.120000000000000)*(x24)))))))+(((0.00500000000000000)*(x10)))+(((0.120000000000000)*(x15)))+(((x6)*(((((-1.00000000000000)*(x0)*(x118)))+(((-1.00000000000000)*(x0)*(x119))))))));
    eerot[3]=((x77)+(x78)+(x83)+(x86));
    eerot[4]=((x88)+(x87)+(x91)+(x90));
    eerot[5]=((x93)+(x95)+(x94)+(x97));
    eetrans[1]=((-0.0550000000000000)+(((0.707106781186547)*(x13)*(((x139)+(((-0.100000000000000)*(x43)))))))+(x143)+(x148)+(x134)+(x130)+(x138)+(x125)+(x121)+(x129)+(x111)+(x117)+(x115)+(x107)+(x101)+(x103)+(((0.707106781186547)*(x21)*(((((0.120000000000000)*(x56)))+(x132)))))+(((0.707106781186547)*(x26)*(((((0.0200000000000000)*(x21)*(((x131)+(((-1.00000000000000)*(x59)))))))+(((0.0200000000000000)*(x58)))))))+(((0.707106781186547)*(x17)*(((((0.120000000000000)*(x59)))+(x133))))));
    eerot[6]=((x77)+(x78)+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x83))));
    eerot[7]=((x88)+(x87)+(((-1.00000000000000)*(x90)))+(((-1.00000000000000)*(x91))));
    eerot[8]=((x93)+(x94)+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x95))));
    eetrans[2]=((-0.115000000000000)+(((-1.00000000000000)*(x143)))+(((-1.00000000000000)*(x148)))+(((-0.707106781186547)*(x13)*(((x139)+(((-0.100000000000000)*(x43)))))))+(((-0.707106781186547)*(x17)*(((x133)+(((0.120000000000000)*(x79)))))))+(((-0.707106781186547)*(x26)*(((((0.0200000000000000)*(x21)*(((((-1.00000000000000)*(x79)))+(x131)))))+(((0.0200000000000000)*(x17)*(x85)))))))+(((-1.00000000000000)*(x129)))+(x125)+(x121)+(x111)+(x117)+(x115)+(x107)+(x101)+(x103)+(((-1.00000000000000)*(x134)))+(((-1.00000000000000)*(x130)))+(((-1.00000000000000)*(x138)))+(((-0.707106781186547)*(x21)*(((((0.120000000000000)*(x84)))+(x132))))));
}

class IKSolver {
public:
    IKReal j9, cj9, sj9, htj9,
           j10, cj10, sj10, htj10,
           j11, cj11, sj11, htj11,
           j12, cj12, sj12, htj12,
           j13, cj13, sj13, htj13,
           j14, cj14, sj14, htj14,
           new_r00, r00, rxp0_0,
           new_r01, r01, rxp0_1,
           new_r02, r02, rxp0_2,
           new_r10, r10, rxp1_0,
           new_r11, r11, rxp1_1,
           new_r12, r12, rxp1_2,
           new_r20, r20, rxp2_0,
           new_r21, r21, rxp2_1,
           new_r22, r22, rxp2_2,
           new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

    bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
            vsolutions.resize(0);
            vsolutions.reserve(8);
            r00 = eerot[0*3+0];
            r01 = eerot[0*3+1];
            r02 = eerot[0*3+2];
            r10 = eerot[1*3+0];
            r11 = eerot[1*3+1];
            r12 = eerot[1*3+2];
            r20 = eerot[2*3+0];
            r21 = eerot[2*3+1];
            r22 = eerot[2*3+2];
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_r00=((-1.00000000000000)*(r02));
            new_r01=r01;
            new_r02=r00;
            new_px=((0.0100000000000000)+(((0.0200000000000000)*(r02)))+(px)+(((-0.120000000000000)*(r00))));
            new_r10=((((0.707106781186548)*(r22)))+(((-0.707106781186548)*(r12))));
            new_r11=((((0.707106781186548)*(r11)))+(((-0.707106781186548)*(r21))));
            new_r12=((((0.707106781186548)*(r10)))+(((-0.707106781186548)*(r20))));
            new_py=((-0.0424264068711929)+(((-0.707106781186548)*(pz)))+(((0.707106781186548)*(py)))+(((-0.0141421356237310)*(r22)))+(((0.0848528137423857)*(r20)))+(((-0.0848528137423857)*(r10)))+(((0.0141421356237310)*(r12))));
            new_r20=((((-0.707106781186548)*(r22)))+(((-0.707106781186548)*(r12))));
            new_r21=((((0.707106781186548)*(r11)))+(((0.707106781186548)*(r21))));
            new_r22=((((0.707106781186548)*(r10)))+(((0.707106781186548)*(r20))));
            new_pz=((0.120208152801713)+(((0.707106781186548)*(pz)))+(((0.707106781186548)*(py)))+(((-0.0848528137423857)*(r20)))+(((0.0141421356237310)*(r22)))+(((-0.0848528137423857)*(r10)))+(((0.0141421356237310)*(r12))));
            r00 = new_r00;
            r01 = new_r01;
            r02 = new_r02;
            r10 = new_r10;
            r11 = new_r11;
            r12 = new_r12;
            r20 = new_r20;
            r21 = new_r21;
            r22 = new_r22;
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
            npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
            npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
            npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
            rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
            rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
            rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
            rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
            rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
            rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
            rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
            rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
            rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
            {
                IKReal j14array[2], cj14array[2], sj14array[2];
                bool j14valid[2]= {false};
                IKReal x0=((-1.00000000000000)*(npy));
                IKReal x1=((-1.00000000000000)*(npx));
                IKReal x2=IKatan2(x0, x1);
                j14array[0]=((-1.00000000000000)*(x2));
                sj14array[0]=IKsin(j14array[0]);
                cj14array[0]=IKcos(j14array[0]);
                j14array[1]=((3.14159265358979)+(((-1.00000000000000)*(x2))));
                sj14array[1]=IKsin(j14array[1]);
                cj14array[1]=IKcos(j14array[1]);
                if( j14array[0] > IKPI )
                {
                    j14array[0]-=IK2PI;
                }
                else if( j14array[0] < -IKPI )
                {   j14array[0]+=IK2PI;
                }
                j14valid[0] = true;
                if( j14array[1] > IKPI )
                {
                    j14array[1]-=IK2PI;
                }
                else if( j14array[1] < -IKPI )
                {   j14array[1]+=IK2PI;
                }
                j14valid[1] = true;
                if( j14valid[0] && j14valid[1] && IKabs(cj14array[0]-cj14array[1]) < 0.0001 && IKabs(sj14array[0]-sj14array[1]) < 0.0001 )
                {
                    j14valid[1]=false;
                }
                for(int ij14 = 0; ij14 < 2; ++ij14)
                {
                    if( !j14valid[ij14] )
                    {
                        continue;
                    }
                    j14 = j14array[ij14];
                    cj14 = cj14array[ij14];
                    sj14 = sj14array[ij14];

                    {
                        IKReal j12array[2], cj12array[2], sj12array[2];
                        bool j12valid[2]= {false};
                        IKReal x3=((41.6305447121813)*(pp));
                        IKReal x4=((-1.01682605459503)+(x3));
                        if( (((1.01682605459503)+(((-1.00000000000000)*(x3))))) < -1.0001 || (((1.01682605459503)+(((-1.00000000000000)*(x3))))) > 1.0001 )
                            continue;
                        IKReal x5=((-1.00000000000000)*(IKasin(((1.01682605459503)+(((-1.00000000000000)*(x3)))))));
                        j12array[0]=((1.61243890589349)+(((-1.00000000000000)*(x5))));
                        sj12array[0]=IKsin(j12array[0]);
                        cj12array[0]=IKcos(j12array[0]);
                        j12array[1]=((4.75403155948328)+(x5));
                        sj12array[1]=IKsin(j12array[1]);
                        cj12array[1]=IKcos(j12array[1]);
                        if( j12array[0] > IKPI )
                        {
                            j12array[0]-=IK2PI;
                        }
                        else if( j12array[0] < -IKPI )
                        {   j12array[0]+=IK2PI;
                        }
                        j12valid[0] = true;
                        if( j12array[1] > IKPI )
                        {
                            j12array[1]-=IK2PI;
                        }
                        else if( j12array[1] < -IKPI )
                        {   j12array[1]+=IK2PI;
                        }
                        j12valid[1] = true;
                        if( j12valid[0] && j12valid[1] && IKabs(cj12array[0]-cj12array[1]) < 0.0001 && IKabs(sj12array[0]-sj12array[1]) < 0.0001 )
                        {
                            j12valid[1]=false;
                        }
                        for(int ij12 = 0; ij12 < 2; ++ij12)
                        {
                            if( !j12valid[ij12] )
                            {
                                continue;
                            }
                            j12 = j12array[ij12];
                            cj12 = cj12array[ij12];
                            sj12 = sj12array[ij12];

                            {
                                IKReal dummyeval[1];
                                dummyeval[0]=((((-2.00000000000000)*(cj14)*(npx)*(npy)*(sj14)))+((((cj14)*(cj14))*((npx)*(npx))))+((((npy)*(npy))*((sj14)*(sj14))))+((npz)*(npz)));
                                if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                {
                                    {
                                        IKReal dummyeval[2];
                                        IKReal x6=((24.0000000000000)*(cj14)*(npx)*(sj12));
                                        IKReal x7=((cj12)*(npy)*(sj14));
                                        IKReal x8=((x7)+(x6));
                                        IKReal x9=((24.0000000000000)*(npy)*(sj12)*(sj14));
                                        IKReal x10=((cj12)*(cj14)*(npx));
                                        IKReal x11=((24.0000000000000)*(cj12)*(npz));
                                        IKReal x12=((20.0000000000000)*(npz));
                                        IKReal x13=((npz)*(sj12));
                                        IKReal x14=((x9)+(x11)+(x10)+(x13)+(x12));
                                        IKReal x15=((((-1.00000000000000)*(x14)))+(x8));
                                        dummyeval[0]=x15;
                                        dummyeval[1]=x15;
                                        if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
                                        {
                                            {
                                                IKReal dummyeval[2];
                                                IKReal x16=((20.0000000000000)*(npy)*(sj14));
                                                IKReal x17=((cj12)*(npz));
                                                IKReal x18=((24.0000000000000)*(cj12)*(npy)*(sj14));
                                                IKReal x19=((npy)*(sj12)*(sj14));
                                                IKReal x20=((x17)+(x16)+(x19)+(x18));
                                                IKReal x21=((24.0000000000000)*(cj12)*(cj14)*(npx));
                                                IKReal x22=((20.0000000000000)*(cj14)*(npx));
                                                IKReal x23=((cj14)*(npx)*(sj12));
                                                IKReal x24=((24.0000000000000)*(npz)*(sj12));
                                                IKReal x25=((x24)+(x21)+(x22)+(x23));
                                                IKReal x26=((((-1.00000000000000)*(x25)))+(x20));
                                                dummyeval[0]=x26;
                                                dummyeval[1]=x26;
                                                if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
                                                {
                                                    continue;

                                                } else
                                                {
                                                    {
                                                        IKReal j13array[1], cj13array[1], sj13array[1];
                                                        bool j13valid[1]= {false};
                                                        IKReal x27=((0.120000000000000)*(cj12));
                                                        IKReal x28=((0.00500000000000000)*(sj12));
                                                        IKReal x29=((0.100000000000000)+(x27)+(x28));
                                                        IKReal x30=((0.100000000000000)*(npy)*(sj14));
                                                        IKReal x31=((0.00500000000000000)*(cj12)*(npz));
                                                        IKReal x32=((npy)*(sj14)*(x28));
                                                        IKReal x33=((npy)*(sj14)*(x27));
                                                        IKReal x34=((x33)+(x32)+(x31)+(x30));
                                                        IKReal x35=((0.120000000000000)*(npz)*(sj12));
                                                        IKReal x36=((cj14)*(npx)*(x27));
                                                        IKReal x37=((0.100000000000000)*(cj14)*(npx));
                                                        IKReal x38=((cj14)*(npx)*(x28));
                                                        IKReal x39=((x38)+(x37)+(x36)+(x35));
                                                        IKReal x40=((((-1.00000000000000)*(x39)))+(x34));
                                                        IKReal x41=((IKabs(x40) != 0)?((IKReal)1/(x40)):(IKReal)1.0e30);
                                                        j13array[0]=IKatan2(((x41)*(((((npz)*(((((cj14)*(npx)))+(((-1.00000000000000)*(npy)*(sj14)))))))+(((x29)*(((((0.120000000000000)*(sj12)))+(((-0.00500000000000000)*(cj12)))))))))), ((x41)*(((((-1.00000000000000)*((x29)*(x29))))+((npz)*(npz))))));
                                                        sj13array[0]=IKsin(j13array[0]);
                                                        cj13array[0]=IKcos(j13array[0]);
                                                        if( j13array[0] > IKPI )
                                                        {
                                                            j13array[0]-=IK2PI;
                                                        }
                                                        else if( j13array[0] < -IKPI )
                                                        {   j13array[0]+=IK2PI;
                                                        }
                                                        j13valid[0] = true;
                                                        for(int ij13 = 0; ij13 < 1; ++ij13)
                                                        {
                                                            if( !j13valid[ij13] )
                                                            {
                                                                continue;
                                                            }
                                                            j13 = j13array[ij13];
                                                            cj13 = cj13array[ij13];
                                                            sj13 = sj13array[ij13];

                                                            rotationfunction0(vsolutions);
                                                        }
                                                    }

                                                }

                                            }

                                        } else
                                        {
                                            {
                                                IKReal j13array[1], cj13array[1], sj13array[1];
                                                bool j13valid[1]= {false};
                                                IKReal x102=((0.120000000000000)*(sj12));
                                                IKReal x103=((0.00500000000000000)*(cj12));
                                                IKReal x104=((npy)*(sj14)*(x103));
                                                IKReal x105=((cj14)*(npx)*(x102));
                                                IKReal x106=((x104)+(x105));
                                                IKReal x107=((0.00500000000000000)*(npz)*(sj12));
                                                IKReal x108=((0.120000000000000)*(cj12)*(npz));
                                                IKReal x109=((npy)*(sj14)*(x102));
                                                IKReal x110=((cj14)*(npx)*(x103));
                                                IKReal x111=((0.100000000000000)*(npz));
                                                IKReal x112=((x111)+(x110)+(x108)+(x109)+(x107));
                                                IKReal x113=((((-1.00000000000000)*(x112)))+(x106));
                                                IKReal x114=((IKabs(x113) != 0)?((IKReal)1/(x113)):(IKReal)1.0e30);
                                                j13array[0]=IKatan2(((x114)*(((((-1.00000000000000)*((((((-1.00000000000000)*(x102)))+(x103)))*(((((-1.00000000000000)*(x102)))+(x103))))))+((npz)*(npz))))), ((x114)*(((((((((-1.00000000000000)*(x103)))+(x102)))*(((0.100000000000000)+(((0.120000000000000)*(cj12)))+(((0.00500000000000000)*(sj12)))))))+(((npz)*(((((-1.00000000000000)*(cj14)*(npx)))+(((npy)*(sj14)))))))))));
                                                sj13array[0]=IKsin(j13array[0]);
                                                cj13array[0]=IKcos(j13array[0]);
                                                if( j13array[0] > IKPI )
                                                {
                                                    j13array[0]-=IK2PI;
                                                }
                                                else if( j13array[0] < -IKPI )
                                                {   j13array[0]+=IK2PI;
                                                }
                                                j13valid[0] = true;
                                                for(int ij13 = 0; ij13 < 1; ++ij13)
                                                {
                                                    if( !j13valid[ij13] )
                                                    {
                                                        continue;
                                                    }
                                                    j13 = j13array[ij13];
                                                    cj13 = cj13array[ij13];
                                                    sj13 = sj13array[ij13];

                                                    rotationfunction0(vsolutions);
                                                }
                                            }

                                        }

                                    }

                                } else
                                {
                                    {
                                        IKReal j13array[1], cj13array[1], sj13array[1];
                                        bool j13valid[1]= {false};
                                        IKReal x115=((0.00500000000000000)*(cj12));
                                        IKReal x116=((0.120000000000000)*(sj12));
                                        IKReal x117=((((-1.00000000000000)*(x116)))+(x115));
                                        IKReal x118=((0.120000000000000)*(cj12));
                                        IKReal x119=((0.00500000000000000)*(sj12));
                                        IKReal x120=((0.100000000000000)+(x119)+(x118));
                                        IKReal x121=((cj14)*(npx));
                                        IKReal x122=((npy)*(sj14));
                                        IKReal x123=((((-1.00000000000000)*(x122)))+(x121));
                                        IKReal x124=(cj14)*(cj14);
                                        IKReal x125=(npx)*(npx);
                                        IKReal x126=(x121)*(x121);
                                        IKReal x127=(npy)*(npy);
                                        IKReal x128=(sj14)*(sj14);
                                        IKReal x129=(x122)*(x122);
                                        IKReal x130=(npz)*(npz);
                                        IKReal x131=((x130)+(x126)+(x129));
                                        IKReal x132=((2.00000000000000)*(x121)*(x122));
                                        IKReal x133=((x131)+(((-1.00000000000000)*(x132))));
                                        IKReal x134=((IKabs(x133) != 0)?((IKReal)1/(x133)):(IKReal)1.0e30);
                                        j13array[0]=IKatan2(((x134)*(((((x117)*(x123)))+(((-1.00000000000000)*(npz)*(x120)))))), ((x134)*(((((x120)*(x123)))+(((npz)*(x117)))))));
                                        sj13array[0]=IKsin(j13array[0]);
                                        cj13array[0]=IKcos(j13array[0]);
                                        if( j13array[0] > IKPI )
                                        {
                                            j13array[0]-=IK2PI;
                                        }
                                        else if( j13array[0] < -IKPI )
                                        {   j13array[0]+=IK2PI;
                                        }
                                        j13valid[0] = true;
                                        for(int ij13 = 0; ij13 < 1; ++ij13)
                                        {
                                            if( !j13valid[ij13] )
                                            {
                                                continue;
                                            }
                                            j13 = j13array[ij13];
                                            cj13 = cj13array[ij13];
                                            sj13 = sj13array[ij13];

                                            rotationfunction0(vsolutions);
                                        }
                                    }

                                }

                            }
                        }
                    }
                }
            }
        }
        return vsolutions.size()>0;
    }
    inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
            IKReal x42=((r01)*(sj14));
            IKReal x43=((cj14)*(r00));
            IKReal x44=((((-1.00000000000000)*(x43)))+(x42));
            IKReal x45=((cj13)*(r02));
            IKReal x46=((r02)*(sj13));
            IKReal x47=((cj13)*(x44));
            IKReal x48=((x46)+(x47));
            IKReal x49=((r11)*(sj14));
            IKReal x50=((cj14)*(r10));
            IKReal x51=((x49)+(((-1.00000000000000)*(x50))));
            IKReal x52=((cj13)*(r12));
            IKReal x53=((-1.00000000000000)*(sj13)*(x51));
            IKReal x54=((x53)+(x52));
            IKReal x55=((r12)*(sj13));
            IKReal x56=((cj13)*(x51));
            IKReal x57=((x55)+(x56));
            IKReal x58=((r21)*(sj14));
            IKReal x59=((cj14)*(r20));
            IKReal x60=((x58)+(((-1.00000000000000)*(x59))));
            IKReal x61=((r22)*(sj13));
            IKReal x62=((cj13)*(x60));
            IKReal x63=((x61)+(x62));
            IKReal x64=((-1.00000000000000)*(sj13)*(x60));
            IKReal x65=((cj13)*(r22));
            IKReal x66=((x64)+(x65));
            new_r00=((((-1.00000000000000)*(sj12)*(x48)))+(((cj12)*(((((-1.00000000000000)*(sj13)*(x44)))+(x45))))));
            new_r01=((((sj12)*(((((-1.00000000000000)*(sj13)*(x44)))+(x45)))))+(((cj12)*(x48))));
            new_r02=((((-1.00000000000000)*(r00)*(sj14)))+(((-1.00000000000000)*(cj14)*(r01))));
            new_r10=((((cj12)*(x54)))+(((-1.00000000000000)*(sj12)*(x57))));
            new_r11=((((sj12)*(x54)))+(((cj12)*(x57))));
            new_r12=((((-1.00000000000000)*(r10)*(sj14)))+(((-1.00000000000000)*(cj14)*(r11))));
            new_r20=((((cj12)*(x66)))+(((-1.00000000000000)*(sj12)*(x63))));
            new_r21=((((cj12)*(x63)))+(((sj12)*(x66))));
            new_r22=((((-1.00000000000000)*(r20)*(sj14)))+(((-1.00000000000000)*(cj14)*(r21))));
            {
                IKReal j10array[2], cj10array[2], sj10array[2];
                bool j10valid[2]= {false};
                if( (new_r22) < -1.0001 || (new_r22) > 1.0001 )
                    continue;
                IKReal x67=IKasin(new_r22);
                j10array[0]=((-0.785398163397448)+(((-1.00000000000000)*(x67))));
                sj10array[0]=IKsin(j10array[0]);
                cj10array[0]=IKcos(j10array[0]);
                j10array[1]=((2.35619449019234)+(x67));
                sj10array[1]=IKsin(j10array[1]);
                cj10array[1]=IKcos(j10array[1]);
                if( j10array[0] > IKPI )
                {
                    j10array[0]-=IK2PI;
                }
                else if( j10array[0] < -IKPI )
                {   j10array[0]+=IK2PI;
                }
                j10valid[0] = true;
                if( j10array[1] > IKPI )
                {
                    j10array[1]-=IK2PI;
                }
                else if( j10array[1] < -IKPI )
                {   j10array[1]+=IK2PI;
                }
                j10valid[1] = true;
                if( j10valid[0] && j10valid[1] && IKabs(cj10array[0]-cj10array[1]) < 0.0001 && IKabs(sj10array[0]-sj10array[1]) < 0.0001 )
                {
                    j10valid[1]=false;
                }
                for(int ij10 = 0; ij10 < 2; ++ij10)
                {
                    if( !j10valid[ij10] )
                    {
                        continue;
                    }
                    j10 = j10array[ij10];
                    cj10 = cj10array[ij10];
                    sj10 = sj10array[ij10];

                    {
                        IKReal dummyeval[2];
                        IKReal x68=((sj10)+(((-1.00000000000000)*(cj10))));
                        dummyeval[0]=x68;
                        dummyeval[1]=x68;
                        if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
                        {
                            {
                                IKReal dummyeval[1];
                                dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
                                if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                {
                                    {
                                        IKReal dummyeval[2];
                                        IKReal x69=((new_r10)*(new_r12)*(sj10));
                                        IKReal x70=((new_r00)*(new_r02)*(sj10));
                                        IKReal x71=((x70)+(x69));
                                        IKReal x72=((cj10)*(new_r00)*(new_r02));
                                        IKReal x73=((cj10)*(new_r10)*(new_r12));
                                        IKReal x74=((x73)+(x72));
                                        dummyeval[0]=((((-1.00000000000000)*(x71)))+(x74));
                                        dummyeval[1]=((((-1.00000000000000)*(x74)))+(x71));
                                        if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
                                        {
                                            {
                                                IKReal evalcond[7];
                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((2.35619449019234)+(j10)), 6.28318530717959)));
                                                evalcond[1]=((1.00000000167803)+(new_r22));
                                                evalcond[2]=new_r20;
                                                evalcond[3]=new_r21;
                                                evalcond[4]=((1.00000000167803)*(new_r20));
                                                evalcond[5]=((1.00000000167803)*(new_r21));
                                                evalcond[6]=((1.00000000000000)+(((1.00000000167803)*(new_r22))));
                                                if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
                                                {
                                                    {
                                                        IKReal j9array[2], cj9array[2], sj9array[2];
                                                        bool j9valid[2]= {false};
                                                        IKReal x75=IKatan2(new_r02, new_r12);
                                                        j9array[0]=((-1.00000000000000)*(x75));
                                                        sj9array[0]=IKsin(j9array[0]);
                                                        cj9array[0]=IKcos(j9array[0]);
                                                        j9array[1]=((3.14159265358979)+(((-1.00000000000000)*(x75))));
                                                        sj9array[1]=IKsin(j9array[1]);
                                                        cj9array[1]=IKcos(j9array[1]);
                                                        if( j9array[0] > IKPI )
                                                        {
                                                            j9array[0]-=IK2PI;
                                                        }
                                                        else if( j9array[0] < -IKPI )
                                                        {   j9array[0]+=IK2PI;
                                                        }
                                                        j9valid[0] = true;
                                                        if( j9array[1] > IKPI )
                                                        {
                                                            j9array[1]-=IK2PI;
                                                        }
                                                        else if( j9array[1] < -IKPI )
                                                        {   j9array[1]+=IK2PI;
                                                        }
                                                        j9valid[1] = true;
                                                        if( j9valid[0] && j9valid[1] && IKabs(cj9array[0]-cj9array[1]) < 0.0001 && IKabs(sj9array[0]-sj9array[1]) < 0.0001 )
                                                        {
                                                            j9valid[1]=false;
                                                        }
                                                        for(int ij9 = 0; ij9 < 2; ++ij9)
                                                        {
                                                            if( !j9valid[ij9] )
                                                            {
                                                                continue;
                                                            }
                                                            j9 = j9array[ij9];
                                                            cj9 = cj9array[ij9];
                                                            sj9 = sj9array[ij9];

                                                            {
                                                                IKReal j11array[1], cj11array[1], sj11array[1];
                                                                bool j11valid[1]= {false};
                                                                j11array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(new_r01)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
                                                                sj11array[0]=IKsin(j11array[0]);
                                                                cj11array[0]=IKcos(j11array[0]);
                                                                if( j11array[0] > IKPI )
                                                                {
                                                                    j11array[0]-=IK2PI;
                                                                }
                                                                else if( j11array[0] < -IKPI )
                                                                {   j11array[0]+=IK2PI;
                                                                }
                                                                j11valid[0] = true;
                                                                for(int ij11 = 0; ij11 < 1; ++ij11)
                                                                {
                                                                    if( !j11valid[ij11] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j11 = j11array[ij11];
                                                                    cj11 = cj11array[ij11];
                                                                    sj11 = sj11array[ij11];

                                                                    {
                                                                        vsolutions.push_back(IKSolution());
                                                                        IKSolution& solution = vsolutions.back();
                                                                        solution.basesol.resize(6);
                                                                        solution.basesol[0].foffset = j9;
                                                                        solution.basesol[1].foffset = j10;
                                                                        solution.basesol[2].foffset = j11;
                                                                        solution.basesol[3].foffset = j12;
                                                                        solution.basesol[4].foffset = j13;
                                                                        solution.basesol[5].foffset = j14;
                                                                        solution.vfree.resize(0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                } else
                                                {
                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((-0.785398163397448)+(j10)), 6.28318530717959)));
                                                    evalcond[1]=((-1.00000000167803)+(new_r22));
                                                    evalcond[2]=new_r20;
                                                    evalcond[3]=new_r21;
                                                    evalcond[4]=((-1.00000000167803)*(new_r20));
                                                    evalcond[5]=((-1.00000000167803)*(new_r21));
                                                    evalcond[6]=((1.00000000000000)+(((-1.00000000167803)*(new_r22))));
                                                    if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
                                                    {
                                                        {
                                                            IKReal j9array[2], cj9array[2], sj9array[2];
                                                            bool j9valid[2]= {false};
                                                            IKReal x76=IKatan2(new_r02, new_r12);
                                                            j9array[0]=((-1.00000000000000)*(x76));
                                                            sj9array[0]=IKsin(j9array[0]);
                                                            cj9array[0]=IKcos(j9array[0]);
                                                            j9array[1]=((3.14159265358979)+(((-1.00000000000000)*(x76))));
                                                            sj9array[1]=IKsin(j9array[1]);
                                                            cj9array[1]=IKcos(j9array[1]);
                                                            if( j9array[0] > IKPI )
                                                            {
                                                                j9array[0]-=IK2PI;
                                                            }
                                                            else if( j9array[0] < -IKPI )
                                                            {   j9array[0]+=IK2PI;
                                                            }
                                                            j9valid[0] = true;
                                                            if( j9array[1] > IKPI )
                                                            {
                                                                j9array[1]-=IK2PI;
                                                            }
                                                            else if( j9array[1] < -IKPI )
                                                            {   j9array[1]+=IK2PI;
                                                            }
                                                            j9valid[1] = true;
                                                            if( j9valid[0] && j9valid[1] && IKabs(cj9array[0]-cj9array[1]) < 0.0001 && IKabs(sj9array[0]-sj9array[1]) < 0.0001 )
                                                            {
                                                                j9valid[1]=false;
                                                            }
                                                            for(int ij9 = 0; ij9 < 2; ++ij9)
                                                            {
                                                                if( !j9valid[ij9] )
                                                                {
                                                                    continue;
                                                                }
                                                                j9 = j9array[ij9];
                                                                cj9 = cj9array[ij9];
                                                                sj9 = sj9array[ij9];

                                                                {
                                                                    IKReal j11array[1], cj11array[1], sj11array[1];
                                                                    bool j11valid[1]= {false};
                                                                    j11array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(new_r01)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
                                                                    sj11array[0]=IKsin(j11array[0]);
                                                                    cj11array[0]=IKcos(j11array[0]);
                                                                    if( j11array[0] > IKPI )
                                                                    {
                                                                        j11array[0]-=IK2PI;
                                                                    }
                                                                    else if( j11array[0] < -IKPI )
                                                                    {   j11array[0]+=IK2PI;
                                                                    }
                                                                    j11valid[0] = true;
                                                                    for(int ij11 = 0; ij11 < 1; ++ij11)
                                                                    {
                                                                        if( !j11valid[ij11] )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        j11 = j11array[ij11];
                                                                        cj11 = cj11array[ij11];
                                                                        sj11 = sj11array[ij11];

                                                                        {
                                                                            vsolutions.push_back(IKSolution());
                                                                            IKSolution& solution = vsolutions.back();
                                                                            solution.basesol.resize(6);
                                                                            solution.basesol[0].foffset = j9;
                                                                            solution.basesol[1].foffset = j10;
                                                                            solution.basesol[2].foffset = j11;
                                                                            solution.basesol[3].foffset = j12;
                                                                            solution.basesol[4].foffset = j13;
                                                                            solution.basesol[5].foffset = j14;
                                                                            solution.vfree.resize(0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                            continue;

                                                        } else
                                                        {
                                                        }
                                                    }
                                                }
                                            }

                                        } else
                                        {
                                            {
                                                IKReal j9array[1], cj9array[1], sj9array[1];
                                                bool j9valid[1]= {false};
                                                IKReal x77=((0.707106781186548)*(new_r20)*(sj10));
                                                IKReal x78=((0.707106781186548)*(cj10)*(new_r20));
                                                IKReal x79=((x77)+(x78));
                                                IKReal x80=((0.707106781186548)*(new_r00)*(new_r02)*(sj10));
                                                IKReal x81=((0.707106781186548)*(new_r10)*(new_r12)*(sj10));
                                                IKReal x82=((x80)+(x81));
                                                IKReal x83=((0.707106781186548)*(cj10)*(new_r00)*(new_r02));
                                                IKReal x84=((0.707106781186548)*(cj10)*(new_r10)*(new_r12));
                                                IKReal x85=((x83)+(x84));
                                                j9array[0]=IKatan2(((new_r02)*(x79)*(((IKabs(((x85)+(((-1.00000000000000)*(x82))))) != 0)?((IKReal)1/(((x85)+(((-1.00000000000000)*(x82)))))):(IKReal)1.0e30))), ((new_r12)*(x79)*(((IKabs(((x82)+(((-1.00000000000000)*(x85))))) != 0)?((IKReal)1/(((x82)+(((-1.00000000000000)*(x85)))))):(IKReal)1.0e30))));
                                                sj9array[0]=IKsin(j9array[0]);
                                                cj9array[0]=IKcos(j9array[0]);
                                                if( j9array[0] > IKPI )
                                                {
                                                    j9array[0]-=IK2PI;
                                                }
                                                else if( j9array[0] < -IKPI )
                                                {   j9array[0]+=IK2PI;
                                                }
                                                j9valid[0] = true;
                                                for(int ij9 = 0; ij9 < 1; ++ij9)
                                                {
                                                    if( !j9valid[ij9] )
                                                    {
                                                        continue;
                                                    }
                                                    j9 = j9array[ij9];
                                                    cj9 = cj9array[ij9];
                                                    sj9 = sj9array[ij9];

                                                    {
                                                        IKReal j11array[1], cj11array[1], sj11array[1];
                                                        bool j11valid[1]= {false};
                                                        j11array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(new_r01)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
                                                        sj11array[0]=IKsin(j11array[0]);
                                                        cj11array[0]=IKcos(j11array[0]);
                                                        if( j11array[0] > IKPI )
                                                        {
                                                            j11array[0]-=IK2PI;
                                                        }
                                                        else if( j11array[0] < -IKPI )
                                                        {   j11array[0]+=IK2PI;
                                                        }
                                                        j11valid[0] = true;
                                                        for(int ij11 = 0; ij11 < 1; ++ij11)
                                                        {
                                                            if( !j11valid[ij11] )
                                                            {
                                                                continue;
                                                            }
                                                            j11 = j11array[ij11];
                                                            cj11 = cj11array[ij11];
                                                            sj11 = sj11array[ij11];

                                                            {
                                                                vsolutions.push_back(IKSolution());
                                                                IKSolution& solution = vsolutions.back();
                                                                solution.basesol.resize(6);
                                                                solution.basesol[0].foffset = j9;
                                                                solution.basesol[1].foffset = j10;
                                                                solution.basesol[2].foffset = j11;
                                                                solution.basesol[3].foffset = j12;
                                                                solution.basesol[4].foffset = j13;
                                                                solution.basesol[5].foffset = j14;
                                                                solution.vfree.resize(0);
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                        }

                                    }

                                } else
                                {
                                    {
                                        IKReal j9array[1], cj9array[1], sj9array[1];
                                        bool j9valid[1]= {false};
                                        IKReal x86=(new_r12)*(new_r12);
                                        IKReal x87=(new_r02)*(new_r02);
                                        IKReal x88=((x86)+(x87));
                                        IKReal x89=((0.707106781186548)*(cj10));
                                        IKReal x90=((0.707106781186548)*(sj10));
                                        IKReal x91=((x89)+(((-1.00000000000000)*(x90))));
                                        j9array[0]=IKatan2(((new_r02)*(x91)*(((IKabs(x88) != 0)?((IKReal)1/(x88)):(IKReal)1.0e30))), ((-1.00000000000000)*(new_r12)*(x91)*(((IKabs(x88) != 0)?((IKReal)1/(x88)):(IKReal)1.0e30))));
                                        sj9array[0]=IKsin(j9array[0]);
                                        cj9array[0]=IKcos(j9array[0]);
                                        if( j9array[0] > IKPI )
                                        {
                                            j9array[0]-=IK2PI;
                                        }
                                        else if( j9array[0] < -IKPI )
                                        {   j9array[0]+=IK2PI;
                                        }
                                        j9valid[0] = true;
                                        for(int ij9 = 0; ij9 < 1; ++ij9)
                                        {
                                            if( !j9valid[ij9] )
                                            {
                                                continue;
                                            }
                                            j9 = j9array[ij9];
                                            cj9 = cj9array[ij9];
                                            sj9 = sj9array[ij9];

                                            {
                                                IKReal j11array[1], cj11array[1], sj11array[1];
                                                bool j11valid[1]= {false};
                                                j11array[0]=IKatan2(((((-1.00000000000000)*(new_r11)*(sj9)))+(((-1.00000000000000)*(cj9)*(new_r01)))), ((((new_r10)*(sj9)))+(((cj9)*(new_r00)))));
                                                sj11array[0]=IKsin(j11array[0]);
                                                cj11array[0]=IKcos(j11array[0]);
                                                if( j11array[0] > IKPI )
                                                {
                                                    j11array[0]-=IK2PI;
                                                }
                                                else if( j11array[0] < -IKPI )
                                                {   j11array[0]+=IK2PI;
                                                }
                                                j11valid[0] = true;
                                                for(int ij11 = 0; ij11 < 1; ++ij11)
                                                {
                                                    if( !j11valid[ij11] )
                                                    {
                                                        continue;
                                                    }
                                                    j11 = j11array[ij11];
                                                    cj11 = cj11array[ij11];
                                                    sj11 = sj11array[ij11];

                                                    {
                                                        vsolutions.push_back(IKSolution());
                                                        IKSolution& solution = vsolutions.back();
                                                        solution.basesol.resize(6);
                                                        solution.basesol[0].foffset = j9;
                                                        solution.basesol[1].foffset = j10;
                                                        solution.basesol[2].foffset = j11;
                                                        solution.basesol[3].foffset = j12;
                                                        solution.basesol[4].foffset = j13;
                                                        solution.basesol[5].foffset = j14;
                                                        solution.vfree.resize(0);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                            }

                        } else
                        {
                            {
                                IKReal j11array[1], cj11array[1], sj11array[1];
                                bool j11valid[1]= {false};
                                IKReal x92=((0.707106781186548)*(sj10));
                                IKReal x93=((0.707106781186548)*(cj10));
                                IKReal x94=((x92)+(((-1.00000000000000)*(x93))));
                                IKReal x95=((IKabs(x94) != 0)?((IKReal)1/(x94)):(IKReal)1.0e30);
                                j11array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(x95)), ((-1.00000000000000)*(new_r21)*(x95)));
                                sj11array[0]=IKsin(j11array[0]);
                                cj11array[0]=IKcos(j11array[0]);
                                if( j11array[0] > IKPI )
                                {
                                    j11array[0]-=IK2PI;
                                }
                                else if( j11array[0] < -IKPI )
                                {   j11array[0]+=IK2PI;
                                }
                                j11valid[0] = true;
                                for(int ij11 = 0; ij11 < 1; ++ij11)
                                {
                                    if( !j11valid[ij11] )
                                    {
                                        continue;
                                    }
                                    j11 = j11array[ij11];
                                    cj11 = cj11array[ij11];
                                    sj11 = sj11array[ij11];

                                    {
                                        IKReal dummyeval[1];
                                        dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
                                        if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                        {
                                            {
                                                IKReal dummyeval[1];
                                                dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
                                                if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                                {
                                                    {
                                                        IKReal dummyeval[1];
                                                        dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r11)))+(((new_r01)*(new_r10))));
                                                        if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                                        {
                                                            continue;

                                                        } else
                                                        {
                                                            {
                                                                IKReal j9array[1], cj9array[1], sj9array[1];
                                                                bool j9valid[1]= {false};
                                                                IKReal x96=((new_r00)*(new_r11));
                                                                IKReal x97=((new_r01)*(new_r10));
                                                                j9array[0]=IKatan2(((((IKabs(((x97)+(((-1.00000000000000)*(x96))))) != 0)?((IKReal)1/(((x97)+(((-1.00000000000000)*(x96)))))):(IKReal)1.0e30))*(((((new_r00)*(sj11)))+(((cj11)*(new_r01)))))), ((((IKabs(((x96)+(((-1.00000000000000)*(x97))))) != 0)?((IKReal)1/(((x96)+(((-1.00000000000000)*(x97)))))):(IKReal)1.0e30))*(((((cj11)*(new_r11)))+(((new_r10)*(sj11)))))));
                                                                sj9array[0]=IKsin(j9array[0]);
                                                                cj9array[0]=IKcos(j9array[0]);
                                                                if( j9array[0] > IKPI )
                                                                {
                                                                    j9array[0]-=IK2PI;
                                                                }
                                                                else if( j9array[0] < -IKPI )
                                                                {   j9array[0]+=IK2PI;
                                                                }
                                                                j9valid[0] = true;
                                                                for(int ij9 = 0; ij9 < 1; ++ij9)
                                                                {
                                                                    if( !j9valid[ij9] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j9 = j9array[ij9];
                                                                    cj9 = cj9array[ij9];
                                                                    sj9 = sj9array[ij9];

                                                                    {
                                                                        vsolutions.push_back(IKSolution());
                                                                        IKSolution& solution = vsolutions.back();
                                                                        solution.basesol.resize(6);
                                                                        solution.basesol[0].foffset = j9;
                                                                        solution.basesol[1].foffset = j10;
                                                                        solution.basesol[2].foffset = j11;
                                                                        solution.basesol[3].foffset = j12;
                                                                        solution.basesol[4].foffset = j13;
                                                                        solution.basesol[5].foffset = j14;
                                                                        solution.vfree.resize(0);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                } else
                                                {
                                                    {
                                                        IKReal j9array[1], cj9array[1], sj9array[1];
                                                        bool j9valid[1]= {false};
                                                        IKReal x98=((new_r00)*(new_r12));
                                                        IKReal x99=((new_r02)*(new_r10));
                                                        j9array[0]=IKatan2(((cj11)*(new_r02)*(((IKabs(((x99)+(((-1.00000000000000)*(x98))))) != 0)?((IKReal)1/(((x99)+(((-1.00000000000000)*(x98)))))):(IKReal)1.0e30))), ((cj11)*(new_r12)*(((IKabs(((x98)+(((-1.00000000000000)*(x99))))) != 0)?((IKReal)1/(((x98)+(((-1.00000000000000)*(x99)))))):(IKReal)1.0e30))));
                                                        sj9array[0]=IKsin(j9array[0]);
                                                        cj9array[0]=IKcos(j9array[0]);
                                                        if( j9array[0] > IKPI )
                                                        {
                                                            j9array[0]-=IK2PI;
                                                        }
                                                        else if( j9array[0] < -IKPI )
                                                        {   j9array[0]+=IK2PI;
                                                        }
                                                        j9valid[0] = true;
                                                        for(int ij9 = 0; ij9 < 1; ++ij9)
                                                        {
                                                            if( !j9valid[ij9] )
                                                            {
                                                                continue;
                                                            }
                                                            j9 = j9array[ij9];
                                                            cj9 = cj9array[ij9];
                                                            sj9 = sj9array[ij9];

                                                            {
                                                                vsolutions.push_back(IKSolution());
                                                                IKSolution& solution = vsolutions.back();
                                                                solution.basesol.resize(6);
                                                                solution.basesol[0].foffset = j9;
                                                                solution.basesol[1].foffset = j10;
                                                                solution.basesol[2].foffset = j11;
                                                                solution.basesol[3].foffset = j12;
                                                                solution.basesol[4].foffset = j13;
                                                                solution.basesol[5].foffset = j14;
                                                                solution.vfree.resize(0);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        } else
                                        {
                                            {
                                                IKReal j9array[1], cj9array[1], sj9array[1];
                                                bool j9valid[1]= {false};
                                                IKReal x100=((new_r02)*(new_r11));
                                                IKReal x101=((new_r01)*(new_r12));
                                                j9array[0]=IKatan2(((new_r02)*(sj11)*(((IKabs(((((-1.00000000000000)*(x100)))+(x101))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x100)))+(x101)))):(IKReal)1.0e30))), ((new_r12)*(sj11)*(((IKabs(((((-1.00000000000000)*(x101)))+(x100))) != 0)?((IKReal)1/(((((-1.00000000000000)*(x101)))+(x100)))):(IKReal)1.0e30))));
                                                sj9array[0]=IKsin(j9array[0]);
                                                cj9array[0]=IKcos(j9array[0]);
                                                if( j9array[0] > IKPI )
                                                {
                                                    j9array[0]-=IK2PI;
                                                }
                                                else if( j9array[0] < -IKPI )
                                                {   j9array[0]+=IK2PI;
                                                }
                                                j9valid[0] = true;
                                                for(int ij9 = 0; ij9 < 1; ++ij9)
                                                {
                                                    if( !j9valid[ij9] )
                                                    {
                                                        continue;
                                                    }
                                                    j9 = j9array[ij9];
                                                    cj9 = cj9array[ij9];
                                                    sj9 = sj9array[ij9];

                                                    {
                                                        vsolutions.push_back(IKSolution());
                                                        IKSolution& solution = vsolutions.back();
                                                        solution.basesol.resize(6);
                                                        solution.basesol[0].foffset = j9;
                                                        solution.basesol[1].foffset = j10;
                                                        solution.basesol[2].foffset = j11;
                                                        solution.basesol[3].foffset = j12;
                                                        solution.basesol[4].foffset = j13;
                                                        solution.basesol[5].foffset = j14;
                                                        solution.vfree.resize(0);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }

                        }

                    }
                }
            }
        }
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
    IKSolver solver;
    return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() {
    return "<kinbody:KinBody - nao (bfc361d52152dbafa1f8ef25562befa9)>";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
