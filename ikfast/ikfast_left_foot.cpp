/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 39 generated on 2011-04-04 22:32:49.126860
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object:
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -shared -Wl,-soname,ik.so -o ik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  6.28318530717959
#define IKPI  3.14159265358979
#define IKPI_2  1.57079632679490

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
    void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
    void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
    void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
    void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
    void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
    void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const {
        return vfree;
    }

    struct VARIABLE
    {
        VARIABLE() : freeind(-1), fmul(0), foffset(0) {}
        VARIABLE(int freeind, IKReal fmul, IKReal foffset) : freeind(freeind), fmul(fmul), foffset(foffset) {}
        int freeind;
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;
};

inline float IKabs(float f) {
    return fabsf(f);
}
inline double IKabs(double f) {
    return fabs(f);
}

inline float IKlog(float f) {
    return logf(f);
}
inline double IKlog(double f) {
    return log(f);
}

inline float IKasin(float f)
{
    IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
    if( f <= -1 ) return -IKPI_2;
    else if( f >= 1 ) return IKPI_2;
    return asinf(f);
}
inline double IKasin(double f)
{
    IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
    if( f <= -1 ) return -IKPI_2;
    else if( f >= 1 ) return IKPI_2;
    return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
    IKFAST_ASSERT( f > -1.001f && f < 1.001f ); // any more error implies something is wrong with the solver
    if( f <= -1 ) return IKPI;
    else if( f >= 1 ) return 0.0f;
    return acosf(f);
}
inline double IKacos(double f)
{
    IKFAST_ASSERT( f > -1.001 && f < 1.001 ); // any more error implies something is wrong with the solver
    if( f <= -1 ) return IKPI;
    else if( f >= 1 ) return 0.0;
    return acos(f);
}
inline float IKsin(float f) {
    return sinf(f);
}
inline double IKsin(double f) {
    return sin(f);
}
inline float IKcos(float f) {
    return cosf(f);
}
inline double IKcos(double f) {
    return cos(f);
}
inline float IKtan(float f) {
    return tanf(f);
}
inline double IKtan(double f) {
    return tan(f);
}
inline float IKsqrt(float f) {
    if( f <= 0.0f ) return 0.0f;
    return sqrtf(f);
}
inline double IKsqrt(double f) {
    if( f <= 0.0 ) return 0.0;
    return sqrt(f);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) )
        return 0;
    return atan2(fy,fx);
}

IKFAST_API int getNumFreeParameters() {
    return 0;
}
IKFAST_API int* getFreeParameters() {
    return NULL;
}
IKFAST_API int getNumJoints() {
    return 6;
}

IKFAST_API int getIKRealSize() {
    return sizeof(IKReal);
}

IKFAST_API int getIKType() {
    return 0x67000001;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
    IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109,x110,x111,x112,x113,x114,x115,x116,x117,x118,x119,x120,x121,x122,x123,x124,x125,x126,x127,x128,x129,x130,x131,x132,x133,x134,x135,x136,x137,x138,x139,x140,x141,x142,x143,x144,x145,x146,x147,x148,x149,x150,x151,x152,x153,x154,x155,x156,x157,x158,x159,x160,x161,x162,x163,x164;
    x0=IKsin(j[0]);
    x1=IKcos(j[2]);
    x2=IKcos(j[1]);
    x3=((0.707106781186547)*(x0)*(x2));
    x4=IKsin(j[1]);
    x5=((0.707106781186547)*(x0)*(x4));
    x6=((x3)+(((-1.00000000000000)*(x5))));
    x7=IKcos(j[0]);
    x8=IKsin(j[2]);
    x9=IKcos(j[3]);
    x10=((x1)*(x6));
    x11=((x7)*(x8));
    x12=((((-1.00000000000000)*(x11)))+(x10));
    x13=IKsin(j[3]);
    x14=IKsin(j[4]);
    x15=((x1)*(x7));
    x16=((x6)*(x8));
    x17=((x15)+(x16));
    x18=((x17)*(x9));
    x19=IKcos(j[4]);
    x20=((-1.00000000000000)*(x11));
    x21=((x10)+(x20));
    x22=IKsin(j[5]);
    x23=((x3)+(x5));
    x24=IKcos(j[5]);
    x25=((x13)*(x21));
    x26=((x18)+(x25));
    x27=((x14)*(x26));
    x28=((x21)*(x9));
    x29=((-1.00000000000000)*(x17));
    x30=((x13)*(x29));
    x31=((x30)+(x28));
    x32=((-1.00000000000000)*(x31));
    x33=((x19)*(x32));
    x34=((x33)+(x27));
    x35=((-1.00000000000000)*(x34));
    x36=((-1.00000000000000)*(x15));
    x37=((-1.00000000000000)*(x16));
    x38=((x37)+(x36));
    x39=((0.707106781186547)*(x2));
    x40=((0.707106781186547)*(x4));
    x41=((x39)+(x40));
    x42=((-1.00000000000000)*(x41));
    x43=((x40)*(x7));
    x44=((x39)*(x7));
    x45=((((-1.00000000000000)*(x44)))+(x43));
    x46=((-1.00000000000000)*(x0)*(x8));
    x47=((x1)*(x45));
    x48=((x46)+(x47));
    x49=((x0)*(x1));
    x50=((x45)*(x8));
    x51=((x49)+(x50));
    x52=((x1)*(x42)*(x9));
    x53=((x13)*(x41)*(x8));
    x54=((x53)+(x52));
    x55=((x42)*(x8)*(x9));
    x56=((x1)*(x13)*(x42));
    x57=((x55)+(x56));
    x58=((x51)*(x9));
    x59=((x0)*(x8));
    x60=((x47)+(((-1.00000000000000)*(x59))));
    x61=((-1.00000000000000)*(x54));
    x62=((x19)*(x61));
    x63=((x14)*(x57));
    x64=((x62)+(x63));
    x65=((-1.00000000000000)*(x64));
    x66=((x44)+(x43));
    x67=((x13)*(x60));
    x68=((x58)+(x67));
    x69=((x14)*(x68));
    x70=((-1.00000000000000)*(x50));
    x71=((-1.00000000000000)*(x49));
    x72=((x71)+(x70));
    x73=((-1.00000000000000)*(x13)*(x72));
    x74=((-1.00000000000000)*(x60)*(x9));
    x75=((x74)+(x73));
    x76=((x19)*(x75));
    x77=((x76)+(x69));
    x78=((-1.00000000000000)*(x77));
    x79=((0.0707106781186548)*(x4));
    x80=((0.0707106781186548)*(x2));
    x81=((x79)+(x80));
    x82=((x13)*(x48));
    x83=((x58)+(x82));
    x84=((0.707106781186547)*(x19)*(x57));
    x85=((0.707106781186547)*(x19)*(x83));
    x86=((0.707106781186547)*(x14)*(x54));
    x87=((x48)*(x9));
    x88=((-1.00000000000000)*(x51));
    x89=((x13)*(x88));
    x90=((x89)+(x87));
    x91=((0.707106781186547)*(x14)*(x90));
    x92=((-1.00000000000000)*(x66));
    x93=((0.707106781186547)*(x24)*(x92));
    x94=((0.707106781186547)*(x22)*(x78));
    x95=((((-1.00000000000000)*(x40)))+(x39));
    x96=((0.707106781186547)*(x24)*(x95));
    x97=((0.707106781186547)*(x22)*(x65));
    x98=((((-1.00000000000000)*(x39)))+(x40));
    x99=((0.707106781186547)*(x22)*(x98));
    x100=((0.707106781186547)*(x22)*(x66));
    x101=((0.707106781186547)*(x24)*(x78));
    x102=((0.707106781186547)*(x24)*(x65));
    x103=((0.100000000000000)*(x49));
    x104=((0.100000000000000)*(x50));
    x105=((x104)+(x103));
    x106=((0.707106781186547)*(x105)*(x13));
    x107=((0.100000000000000)*(x59));
    x108=((-0.100000000000000)*(x47));
    x109=((x108)+(x107));
    x110=((0.707106781186547)*(x109)*(x9));
    x111=((0.120000000000000)*(x82));
    x112=((0.120000000000000)*(x58));
    x113=((x112)+(x111));
    x114=((0.707106781186547)*(x113)*(x19));
    x115=((0.0848528137423857)*(x59));
    x116=((0.00353553390593274)*(x2));
    x117=((0.00353553390593274)*(x4));
    x118=((x117)+(x116));
    x119=((-1.00000000000000)*(x118));
    x120=((0.707106781186547)*(x119)*(x8));
    x121=((0.0141421356237309)*(x2)*(x7));
    x122=((0.0141421356237309)*(x4)*(x7));
    x123=((x122)+(x121));
    x124=((-1.00000000000000)*(x123));
    x125=((0.707106781186547)*(x124)*(x22));
    x126=((-1.00000000000000)*(x81));
    x127=((0.707106781186547)*(x126)*(x13)*(x8));
    x128=((-1.00000000000000)*(x87));
    x129=((x128)+(x73));
    x130=((0.0200000000000000)*(x129)*(x19));
    x131=((0.0200000000000000)*(x14)*(x83));
    x132=((x131)+(x130));
    x133=((0.707106781186547)*(x132)*(x24));
    x134=((0.0848528137423857)*(x2));
    x135=((0.0848528137423857)*(x4));
    x136=((x135)+(x134));
    x137=((0.707106781186547)*(x1)*(x136));
    x138=((0.00353553390593274)*(x49));
    x139=((0.120000000000000)*(x55));
    x140=((0.120000000000000)*(x56));
    x141=((x140)+(x139));
    x142=((0.707106781186547)*(x141)*(x19));
    x143=((0.0200000000000000)*(x63));
    x144=((0.120000000000000)*(x52));
    x145=((0.120000000000000)*(x53));
    x146=((x144)+(x145));
    x147=((0.707106781186547)*(x14)*(x146));
    x148=((0.707106781186547)*(x1)*(x81)*(x9));
    x149=((1.00000000000000)*(x134)*(x7));
    x150=((1.00000000000000)*(x135)*(x7));
    x151=((((-1.00000000000000)*(x150)))+(x149));
    x152=((0.707106781186547)*(x1)*(x151));
    x153=((1.00000000000000)*(x117)*(x7));
    x154=((1.00000000000000)*(x116)*(x7));
    x155=((((-1.00000000000000)*(x154)))+(x153));
    x156=((0.707106781186547)*(x155)*(x8));
    x157=((0.120000000000000)*(x13)*(x72));
    x158=((0.120000000000000)*(x87));
    x159=((x157)+(x158));
    x160=((0.707106781186547)*(x14)*(x159));
    x161=((0.0141421356237309)*(x2));
    x162=((0.0141421356237309)*(x4));
    x163=((((-1.00000000000000)*(x162)))+(x161));
    x164=((0.707106781186547)*(x163)*(x22));
    eerot[0]=((((x14)*(((((x13)*(x38)))+(((x12)*(x9)))))))+(((x19)*(((x18)+(((x12)*(x13))))))));
    eerot[1]=((((x23)*(x24)))+(((x22)*(x35))));
    eerot[2]=((((-1.00000000000000)*(x22)*(x23)))+(((x24)*(x35))));
    eetrans[0]=((-0.0100000000000000)+(((x19)*(((((0.120000000000000)*(x25)))+(((0.120000000000000)*(x18)))))))+(((x1)*(((((-1.00000000000000)*(x0)*(x134)))+(((1.00000000000000)*(x0)*(x135)))))))+(((x9)*(((((0.100000000000000)*(x11)))+(((-0.100000000000000)*(x10)))))))+(((x13)*(((((0.100000000000000)*(x15)))+(((0.100000000000000)*(x16)))))))+(((x22)*(((((1.00000000000000)*(x0)*(x162)))+(((1.00000000000000)*(x0)*(x161)))))))+(((0.00500000000000000)*(x15)))+(((0.120000000000000)*(x11)))+(((x24)*(((((0.0200000000000000)*(x27)))+(((0.0200000000000000)*(x19)*(((((-1.00000000000000)*(x28)))+(((-1.00000000000000)*(x13)*(x38)))))))))))+(((x14)*(((((0.120000000000000)*(x28)))+(((0.120000000000000)*(x13)*(x38)))))))+(((x8)*(((((1.00000000000000)*(x0)*(x116)))+(((-1.00000000000000)*(x0)*(x117))))))));
    eerot[3]=((x86)+(x84)+(((-1.00000000000000)*(x91)))+(((-1.00000000000000)*(x85))));
    eerot[4]=((x97)+(x96)+(((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x94))));
    eerot[5]=((((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x100)))+(x102)+(x99));
    eetrans[1]=((0.0550000000000000)+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x110)))+(((-1.00000000000000)*(x125)))+(x164)+(x142)+(x147)+(x148)+(x137)+(x127)+(x120)+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x138)))+(((0.707106781186547)*(x24)*(((x143)+(((0.0200000000000000)*(x62))))))));
    eerot[6]=((((-1.00000000000000)*(x91)))+(((-1.00000000000000)*(x84)))+(((-1.00000000000000)*(x86)))+(((-1.00000000000000)*(x85))));
    eerot[7]=((((-1.00000000000000)*(x93)))+(((-1.00000000000000)*(x96)))+(((-1.00000000000000)*(x97)))+(((-1.00000000000000)*(x94))));
    eerot[8]=((((-1.00000000000000)*(x101)))+(((-1.00000000000000)*(x100)))+(((-1.00000000000000)*(x102)))+(((-1.00000000000000)*(x99))));
    eetrans[2]=((-0.115000000000000)+(((-1.00000000000000)*(x142)))+(((-1.00000000000000)*(x148)))+(((-1.00000000000000)*(x147)))+(((-1.00000000000000)*(x152)))+(((-1.00000000000000)*(x156)))+(((-1.00000000000000)*(x164)))+(((-1.00000000000000)*(x160)))+(((-1.00000000000000)*(x106)))+(((-1.00000000000000)*(x114)))+(((-1.00000000000000)*(x115)))+(((-1.00000000000000)*(x110)))+(((-1.00000000000000)*(x120)))+(((-1.00000000000000)*(x125)))+(((-1.00000000000000)*(x127)))+(((-1.00000000000000)*(x137)))+(((-1.00000000000000)*(x133)))+(((-1.00000000000000)*(x138)))+(((-0.707106781186547)*(x24)*(((((0.0200000000000000)*(x19)*(((((-1.00000000000000)*(x52)))+(((-1.00000000000000)*(x53)))))))+(x143))))));
}

class IKSolver {
public:
    IKReal j2, cj2, sj2, htj2,
           j3, cj3, sj3, htj3,
           j4, cj4, sj4, htj4,
           j5, cj5, sj5, htj5,
           j6, cj6, sj6, htj6,
           j7, cj7, sj7, htj7,
           new_r00, r00, rxp0_0,
           new_r01, r01, rxp0_1,
           new_r02, r02, rxp0_2,
           new_r10, r10, rxp1_0,
           new_r11, r11, rxp1_1,
           new_r12, r12, rxp1_2,
           new_r20, r20, rxp2_0,
           new_r21, r21, rxp2_1,
           new_r22, r22, rxp2_2,
           new_px, new_py, new_pz, px, py, pz, npx, npy, npz, pp;

    bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
        for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
            vsolutions.resize(0);
            vsolutions.reserve(8);
            r00 = eerot[0*3+0];
            r01 = eerot[0*3+1];
            r02 = eerot[0*3+2];
            r10 = eerot[1*3+0];
            r11 = eerot[1*3+1];
            r12 = eerot[1*3+2];
            r20 = eerot[2*3+0];
            r21 = eerot[2*3+1];
            r22 = eerot[2*3+2];
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_r00=((-1.00000000000000)*(r02));
            new_r01=r01;
            new_r02=r00;
            new_px=((0.0100000000000000)+(((0.0200000000000000)*(r02)))+(px)+(((-0.120000000000000)*(r00))));
            new_r10=((((0.707106781186548)*(r12)))+(((0.707106781186548)*(r22))));
            new_r11=((((-0.707106781186548)*(r21)))+(((-0.707106781186548)*(r11))));
            new_r12=((((-0.707106781186548)*(r20)))+(((-0.707106781186548)*(r10))));
            new_py=((-0.0424264068711929)+(((-0.707106781186548)*(pz)))+(((-0.707106781186548)*(py)))+(((0.0848528137423857)*(r10)))+(((-0.0141421356237310)*(r22)))+(((0.0848528137423857)*(r20)))+(((-0.0141421356237310)*(r12))));
            new_r20=((((0.707106781186548)*(r22)))+(((-0.707106781186548)*(r12))));
            new_r21=((((0.707106781186548)*(r11)))+(((-0.707106781186548)*(r21))));
            new_r22=((((0.707106781186548)*(r10)))+(((-0.707106781186548)*(r20))));
            new_pz=((-0.120208152801713)+(((-0.707106781186548)*(pz)))+(((0.707106781186548)*(py)))+(((-0.0141421356237310)*(r22)))+(((0.0848528137423857)*(r20)))+(((-0.0848528137423857)*(r10)))+(((0.0141421356237310)*(r12))));
            r00 = new_r00;
            r01 = new_r01;
            r02 = new_r02;
            r10 = new_r10;
            r11 = new_r11;
            r12 = new_r12;
            r20 = new_r20;
            r21 = new_r21;
            r22 = new_r22;
            px = new_px;
            py = new_py;
            pz = new_pz;
            pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
            npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
            npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
            npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
            rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
            rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
            rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
            rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
            rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
            rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
            rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
            rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
            rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
            {
                IKReal j7array[2], cj7array[2], sj7array[2];
                bool j7valid[2]= {false};
                IKReal x0=((-1.00000000000000)*(npy));
                IKReal x1=((-1.00000000000000)*(npx));
                IKReal x2=IKatan2(x0, x1);
                j7array[0]=((-1.00000000000000)*(x2));
                sj7array[0]=IKsin(j7array[0]);
                cj7array[0]=IKcos(j7array[0]);
                j7array[1]=((3.14159265358979)+(((-1.00000000000000)*(x2))));
                sj7array[1]=IKsin(j7array[1]);
                cj7array[1]=IKcos(j7array[1]);
                if( j7array[0] > IKPI )
                {
                    j7array[0]-=IK2PI;
                }
                else if( j7array[0] < -IKPI )
                {   j7array[0]+=IK2PI;
                }
                j7valid[0] = true;
                if( j7array[1] > IKPI )
                {
                    j7array[1]-=IK2PI;
                }
                else if( j7array[1] < -IKPI )
                {   j7array[1]+=IK2PI;
                }
                j7valid[1] = true;
                if( j7valid[0] && j7valid[1] && IKabs(cj7array[0]-cj7array[1]) < 0.0001 && IKabs(sj7array[0]-sj7array[1]) < 0.0001 )
                {
                    j7valid[1]=false;
                }
                for(int ij7 = 0; ij7 < 2; ++ij7)
                {
                    if( !j7valid[ij7] )
                    {
                        continue;
                    }
                    j7 = j7array[ij7];
                    cj7 = cj7array[ij7];
                    sj7 = sj7array[ij7];

                    {
                        IKReal j5array[2], cj5array[2], sj5array[2];
                        bool j5valid[2]= {false};
                        IKReal x3=((41.6305447121813)*(pp));
                        IKReal x4=((-1.01682605459503)+(x3));
                        if( (((1.01682605459503)+(((-1.00000000000000)*(x3))))) < -1.0001 || (((1.01682605459503)+(((-1.00000000000000)*(x3))))) > 1.0001 )
                            continue;
                        IKReal x5=((-1.00000000000000)*(IKasin(((1.01682605459503)+(((-1.00000000000000)*(x3)))))));
                        j5array[0]=((1.61243890589349)+(((-1.00000000000000)*(x5))));
                        sj5array[0]=IKsin(j5array[0]);
                        cj5array[0]=IKcos(j5array[0]);
                        j5array[1]=((4.75403155948328)+(x5));
                        sj5array[1]=IKsin(j5array[1]);
                        cj5array[1]=IKcos(j5array[1]);
                        if( j5array[0] > IKPI )
                        {
                            j5array[0]-=IK2PI;
                        }
                        else if( j5array[0] < -IKPI )
                        {   j5array[0]+=IK2PI;
                        }
                        j5valid[0] = true;
                        if( j5array[1] > IKPI )
                        {
                            j5array[1]-=IK2PI;
                        }
                        else if( j5array[1] < -IKPI )
                        {   j5array[1]+=IK2PI;
                        }
                        j5valid[1] = true;
                        if( j5valid[0] && j5valid[1] && IKabs(cj5array[0]-cj5array[1]) < 0.0001 && IKabs(sj5array[0]-sj5array[1]) < 0.0001 )
                        {
                            j5valid[1]=false;
                        }
                        for(int ij5 = 0; ij5 < 2; ++ij5)
                        {
                            if( !j5valid[ij5] )
                            {
                                continue;
                            }
                            j5 = j5array[ij5];
                            cj5 = cj5array[ij5];
                            sj5 = sj5array[ij5];

                            {
                                IKReal dummyeval[1];
                                dummyeval[0]=(((((cj7)*(cj7))*((npx)*(npx))))+((((npy)*(npy))*((sj7)*(sj7))))+(((-2.00000000000000)*(cj7)*(npx)*(npy)*(sj7)))+((npz)*(npz)));
                                if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                {
                                    {
                                        IKReal dummyeval[2];
                                        IKReal x6=((24.0000000000000)*(cj7)*(npx)*(sj5));
                                        IKReal x7=((cj5)*(npy)*(sj7));
                                        IKReal x8=((x7)+(x6));
                                        IKReal x9=((npz)*(sj5));
                                        IKReal x10=((20.0000000000000)*(npz));
                                        IKReal x11=((24.0000000000000)*(npy)*(sj5)*(sj7));
                                        IKReal x12=((24.0000000000000)*(cj5)*(npz));
                                        IKReal x13=((cj5)*(cj7)*(npx));
                                        IKReal x14=((x9)+(x11)+(x10)+(x13)+(x12));
                                        IKReal x15=((((-1.00000000000000)*(x14)))+(x8));
                                        dummyeval[0]=x15;
                                        dummyeval[1]=x15;
                                        if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
                                        {
                                            {
                                                IKReal dummyeval[2];
                                                IKReal x16=((20.0000000000000)*(npy)*(sj7));
                                                IKReal x17=((24.0000000000000)*(cj5)*(npy)*(sj7));
                                                IKReal x18=((npy)*(sj5)*(sj7));
                                                IKReal x19=((cj5)*(npz));
                                                IKReal x20=((x17)+(x16)+(x19)+(x18));
                                                IKReal x21=((24.0000000000000)*(cj5)*(cj7)*(npx));
                                                IKReal x22=((24.0000000000000)*(npz)*(sj5));
                                                IKReal x23=((cj7)*(npx)*(sj5));
                                                IKReal x24=((20.0000000000000)*(cj7)*(npx));
                                                IKReal x25=((x24)+(x21)+(x22)+(x23));
                                                IKReal x26=((((-1.00000000000000)*(x25)))+(x20));
                                                dummyeval[0]=x26;
                                                dummyeval[1]=x26;
                                                if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
                                                {
                                                    continue;

                                                } else
                                                {
                                                    {
                                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                                        bool j6valid[1]= {false};
                                                        IKReal x27=((0.00500000000000000)*(sj5));
                                                        IKReal x28=((0.120000000000000)*(cj5));
                                                        IKReal x29=((0.100000000000000)+(x27)+(x28));
                                                        IKReal x30=((npy)*(sj7)*(x28));
                                                        IKReal x31=((0.100000000000000)*(npy)*(sj7));
                                                        IKReal x32=((0.00500000000000000)*(cj5)*(npz));
                                                        IKReal x33=((npy)*(sj7)*(x27));
                                                        IKReal x34=((x33)+(x32)+(x31)+(x30));
                                                        IKReal x35=((0.100000000000000)*(cj7)*(npx));
                                                        IKReal x36=((0.120000000000000)*(npz)*(sj5));
                                                        IKReal x37=((cj7)*(npx)*(x28));
                                                        IKReal x38=((cj7)*(npx)*(x27));
                                                        IKReal x39=((x38)+(x37)+(x36)+(x35));
                                                        IKReal x40=((((-1.00000000000000)*(x39)))+(x34));
                                                        IKReal x41=((IKabs(x40) != 0)?((IKReal)1/(x40)):(IKReal)1.0e30);
                                                        j6array[0]=IKatan2(((x41)*(((((npz)*(((((-1.00000000000000)*(npy)*(sj7)))+(((cj7)*(npx)))))))+(((x29)*(((((0.120000000000000)*(sj5)))+(((-0.00500000000000000)*(cj5)))))))))), ((x41)*(((((-1.00000000000000)*((x29)*(x29))))+((npz)*(npz))))));
                                                        sj6array[0]=IKsin(j6array[0]);
                                                        cj6array[0]=IKcos(j6array[0]);
                                                        if( j6array[0] > IKPI )
                                                        {
                                                            j6array[0]-=IK2PI;
                                                        }
                                                        else if( j6array[0] < -IKPI )
                                                        {   j6array[0]+=IK2PI;
                                                        }
                                                        j6valid[0] = true;
                                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                                        {
                                                            if( !j6valid[ij6] )
                                                            {
                                                                continue;
                                                            }
                                                            j6 = j6array[ij6];
                                                            cj6 = cj6array[ij6];
                                                            sj6 = sj6array[ij6];

                                                            rotationfunction0(vsolutions);
                                                        }
                                                    }

                                                }

                                            }

                                        } else
                                        {
                                            {
                                                IKReal j6array[1], cj6array[1], sj6array[1];
                                                bool j6valid[1]= {false};
                                                IKReal x99=((0.120000000000000)*(sj5));
                                                IKReal x100=((0.00500000000000000)*(cj5));
                                                IKReal x101=((cj7)*(npx)*(x99));
                                                IKReal x102=((npy)*(sj7)*(x100));
                                                IKReal x103=((x101)+(x102));
                                                IKReal x104=((cj7)*(npx)*(x100));
                                                IKReal x105=((npy)*(sj7)*(x99));
                                                IKReal x106=((0.100000000000000)*(npz));
                                                IKReal x107=((0.120000000000000)*(cj5)*(npz));
                                                IKReal x108=((0.00500000000000000)*(npz)*(sj5));
                                                IKReal x109=((x108)+(x104)+(x105)+(x106)+(x107));
                                                IKReal x110=((((-1.00000000000000)*(x109)))+(x103));
                                                IKReal x111=((IKabs(x110) != 0)?((IKReal)1/(x110)):(IKReal)1.0e30);
                                                j6array[0]=IKatan2(((x111)*(((((-1.00000000000000)*((((x100)+(((-1.00000000000000)*(x99)))))*(((x100)+(((-1.00000000000000)*(x99))))))))+((npz)*(npz))))), ((x111)*(((((npz)*(((((npy)*(sj7)))+(((-1.00000000000000)*(cj7)*(npx)))))))+(((((((-1.00000000000000)*(x100)))+(x99)))*(((0.100000000000000)+(((0.00500000000000000)*(sj5)))+(((0.120000000000000)*(cj5)))))))))));
                                                sj6array[0]=IKsin(j6array[0]);
                                                cj6array[0]=IKcos(j6array[0]);
                                                if( j6array[0] > IKPI )
                                                {
                                                    j6array[0]-=IK2PI;
                                                }
                                                else if( j6array[0] < -IKPI )
                                                {   j6array[0]+=IK2PI;
                                                }
                                                j6valid[0] = true;
                                                for(int ij6 = 0; ij6 < 1; ++ij6)
                                                {
                                                    if( !j6valid[ij6] )
                                                    {
                                                        continue;
                                                    }
                                                    j6 = j6array[ij6];
                                                    cj6 = cj6array[ij6];
                                                    sj6 = sj6array[ij6];

                                                    rotationfunction0(vsolutions);
                                                }
                                            }

                                        }

                                    }

                                } else
                                {
                                    {
                                        IKReal j6array[1], cj6array[1], sj6array[1];
                                        bool j6valid[1]= {false};
                                        IKReal x112=((0.00500000000000000)*(sj5));
                                        IKReal x113=((0.120000000000000)*(cj5));
                                        IKReal x114=((0.100000000000000)+(x113)+(x112));
                                        IKReal x115=((cj7)*(npx));
                                        IKReal x116=((npy)*(sj7));
                                        IKReal x117=((((-1.00000000000000)*(x116)))+(x115));
                                        IKReal x118=((0.00500000000000000)*(cj5));
                                        IKReal x119=((0.120000000000000)*(sj5));
                                        IKReal x120=((((-1.00000000000000)*(x119)))+(x118));
                                        IKReal x121=(cj7)*(cj7);
                                        IKReal x122=(npx)*(npx);
                                        IKReal x123=(x115)*(x115);
                                        IKReal x124=(npy)*(npy);
                                        IKReal x125=(sj7)*(sj7);
                                        IKReal x126=(x116)*(x116);
                                        IKReal x127=(npz)*(npz);
                                        IKReal x128=((x126)+(x127)+(x123));
                                        IKReal x129=((2.00000000000000)*(x115)*(x116));
                                        IKReal x130=((((-1.00000000000000)*(x129)))+(x128));
                                        IKReal x131=((IKabs(x130) != 0)?((IKReal)1/(x130)):(IKReal)1.0e30);
                                        j6array[0]=IKatan2(((x131)*(((((x117)*(x120)))+(((-1.00000000000000)*(npz)*(x114)))))), ((x131)*(((((x114)*(x117)))+(((npz)*(x120)))))));
                                        sj6array[0]=IKsin(j6array[0]);
                                        cj6array[0]=IKcos(j6array[0]);
                                        if( j6array[0] > IKPI )
                                        {
                                            j6array[0]-=IK2PI;
                                        }
                                        else if( j6array[0] < -IKPI )
                                        {   j6array[0]+=IK2PI;
                                        }
                                        j6valid[0] = true;
                                        for(int ij6 = 0; ij6 < 1; ++ij6)
                                        {
                                            if( !j6valid[ij6] )
                                            {
                                                continue;
                                            }
                                            j6 = j6array[ij6];
                                            cj6 = cj6array[ij6];
                                            sj6 = sj6array[ij6];

                                            rotationfunction0(vsolutions);
                                        }
                                    }

                                }

                            }
                        }
                    }
                }
            }
        }
        return vsolutions.size()>0;
    }
    inline void rotationfunction0(std::vector<IKSolution>& vsolutions) {
        for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
            IKReal x42=((r01)*(sj7));
            IKReal x43=((cj7)*(r00));
            IKReal x44=((((-1.00000000000000)*(x43)))+(x42));
            IKReal x45=((cj6)*(r02));
            IKReal x46=((cj6)*(x44));
            IKReal x47=((r02)*(sj6));
            IKReal x48=((x46)+(x47));
            IKReal x49=((r11)*(sj7));
            IKReal x50=((cj7)*(r10));
            IKReal x51=((x49)+(((-1.00000000000000)*(x50))));
            IKReal x52=((cj6)*(x51));
            IKReal x53=((r12)*(sj6));
            IKReal x54=((x53)+(x52));
            IKReal x55=((cj6)*(r12));
            IKReal x56=((r21)*(sj7));
            IKReal x57=((cj7)*(r20));
            IKReal x58=((x56)+(((-1.00000000000000)*(x57))));
            IKReal x59=((cj6)*(x58));
            IKReal x60=((r22)*(sj6));
            IKReal x61=((x59)+(x60));
            IKReal x62=((-1.00000000000000)*(sj6)*(x58));
            IKReal x63=((cj6)*(r22));
            IKReal x64=((x62)+(x63));
            new_r00=((((cj5)*(((x45)+(((-1.00000000000000)*(sj6)*(x44)))))))+(((-1.00000000000000)*(sj5)*(x48))));
            new_r01=((((sj5)*(((((-1.00000000000000)*(sj6)*(x44)))+(x45)))))+(((cj5)*(x48))));
            new_r02=((((-1.00000000000000)*(r00)*(sj7)))+(((-1.00000000000000)*(cj7)*(r01))));
            new_r10=((((cj5)*(((((-1.00000000000000)*(sj6)*(x51)))+(x55)))))+(((-1.00000000000000)*(sj5)*(x54))));
            new_r11=((((sj5)*(((((-1.00000000000000)*(sj6)*(x51)))+(x55)))))+(((cj5)*(x54))));
            new_r12=((((-1.00000000000000)*(cj7)*(r11)))+(((-1.00000000000000)*(r10)*(sj7))));
            new_r20=((((-1.00000000000000)*(sj5)*(x61)))+(((cj5)*(x64))));
            new_r21=((((cj5)*(x61)))+(((sj5)*(x64))));
            new_r22=((((-1.00000000000000)*(r20)*(sj7)))+(((-1.00000000000000)*(cj7)*(r21))));
            {
                IKReal j3array[2], cj3array[2], sj3array[2];
                bool j3valid[2]= {false};
                if( (new_r22) < -1.0001 || (new_r22) > 1.0001 )
                    continue;
                IKReal x65=IKasin(new_r22);
                j3array[0]=((-2.35619449019234)+(((-1.00000000000000)*(x65))));
                sj3array[0]=IKsin(j3array[0]);
                cj3array[0]=IKcos(j3array[0]);
                j3array[1]=((0.785398163397448)+(x65));
                sj3array[1]=IKsin(j3array[1]);
                cj3array[1]=IKcos(j3array[1]);
                if( j3array[0] > IKPI )
                {
                    j3array[0]-=IK2PI;
                }
                else if( j3array[0] < -IKPI )
                {   j3array[0]+=IK2PI;
                }
                j3valid[0] = true;
                if( j3array[1] > IKPI )
                {
                    j3array[1]-=IK2PI;
                }
                else if( j3array[1] < -IKPI )
                {   j3array[1]+=IK2PI;
                }
                j3valid[1] = true;
                if( j3valid[0] && j3valid[1] && IKabs(cj3array[0]-cj3array[1]) < 0.0001 && IKabs(sj3array[0]-sj3array[1]) < 0.0001 )
                {
                    j3valid[1]=false;
                }
                for(int ij3 = 0; ij3 < 2; ++ij3)
                {
                    if( !j3valid[ij3] )
                    {
                        continue;
                    }
                    j3 = j3array[ij3];
                    cj3 = cj3array[ij3];
                    sj3 = sj3array[ij3];

                    {
                        IKReal dummyeval[2];
                        IKReal x66=((sj3)+(cj3));
                        dummyeval[0]=x66;
                        dummyeval[1]=x66;
                        if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
                        {
                            {
                                IKReal dummyeval[1];
                                dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
                                if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                {
                                    {
                                        IKReal dummyeval[2];
                                        IKReal x67=((new_r10)*(new_r12)*(sj3));
                                        IKReal x68=((cj3)*(new_r00)*(new_r02));
                                        IKReal x69=((new_r00)*(new_r02)*(sj3));
                                        IKReal x70=((cj3)*(new_r10)*(new_r12));
                                        IKReal x71=((x70)+(x67)+(x68)+(x69));
                                        dummyeval[0]=((-1.00000000000000)*(x71));
                                        dummyeval[1]=x71;
                                        if( IKabs(dummyeval[0]) < 0.0000100000000000  || IKabs(dummyeval[1]) < 0.0000100000000000  )
                                        {
                                            {
                                                IKReal evalcond[7];
                                                evalcond[0]=((-3.14159265358979)+(IKfmod(((3.92699081698724)+(j3)), 6.28318530717959)));
                                                evalcond[1]=((1.00000000167803)+(new_r22));
                                                evalcond[2]=new_r20;
                                                evalcond[3]=new_r21;
                                                evalcond[4]=((1.00000000167803)*(new_r20));
                                                evalcond[5]=((1.00000000167803)*(new_r21));
                                                evalcond[6]=((1.00000000000000)+(((1.00000000167803)*(new_r22))));
                                                if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
                                                {
                                                    {
                                                        IKReal j2array[2], cj2array[2], sj2array[2];
                                                        bool j2valid[2]= {false};
                                                        IKReal x72=IKatan2(new_r02, new_r12);
                                                        j2array[0]=((-1.00000000000000)*(x72));
                                                        sj2array[0]=IKsin(j2array[0]);
                                                        cj2array[0]=IKcos(j2array[0]);
                                                        j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x72))));
                                                        sj2array[1]=IKsin(j2array[1]);
                                                        cj2array[1]=IKcos(j2array[1]);
                                                        if( j2array[0] > IKPI )
                                                        {
                                                            j2array[0]-=IK2PI;
                                                        }
                                                        else if( j2array[0] < -IKPI )
                                                        {   j2array[0]+=IK2PI;
                                                        }
                                                        j2valid[0] = true;
                                                        if( j2array[1] > IKPI )
                                                        {
                                                            j2array[1]-=IK2PI;
                                                        }
                                                        else if( j2array[1] < -IKPI )
                                                        {   j2array[1]+=IK2PI;
                                                        }
                                                        j2valid[1] = true;
                                                        if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                                                        {
                                                            j2valid[1]=false;
                                                        }
                                                        for(int ij2 = 0; ij2 < 2; ++ij2)
                                                        {
                                                            if( !j2valid[ij2] )
                                                            {
                                                                continue;
                                                            }
                                                            j2 = j2array[ij2];
                                                            cj2 = cj2array[ij2];
                                                            sj2 = sj2array[ij2];

                                                            {
                                                                IKReal j4array[1], cj4array[1], sj4array[1];
                                                                bool j4valid[1]= {false};
                                                                j4array[0]=IKatan2(((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))), ((((new_r10)*(sj2)))+(((cj2)*(new_r00)))));
                                                                sj4array[0]=IKsin(j4array[0]);
                                                                cj4array[0]=IKcos(j4array[0]);
                                                                if( j4array[0] > IKPI )
                                                                {
                                                                    j4array[0]-=IK2PI;
                                                                }
                                                                else if( j4array[0] < -IKPI )
                                                                {   j4array[0]+=IK2PI;
                                                                }
                                                                j4valid[0] = true;
                                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                {
                                                                    if( !j4valid[ij4] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j4 = j4array[ij4];
                                                                    cj4 = cj4array[ij4];
                                                                    sj4 = sj4array[ij4];

                                                                    {
                                                                        vsolutions.push_back(IKSolution());
                                                                        IKSolution& solution = vsolutions.back();
                                                                        solution.basesol.resize(6);
                                                                        solution.basesol[0].foffset = j2;
                                                                        solution.basesol[1].foffset = j3;
                                                                        solution.basesol[2].foffset = j4;
                                                                        solution.basesol[3].foffset = j5;
                                                                        solution.basesol[4].foffset = j6;
                                                                        solution.basesol[5].foffset = j7;
                                                                        solution.vfree.resize(0);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                } else
                                                {
                                                    evalcond[0]=((-3.14159265358979)+(IKfmod(((0.785398163397448)+(j3)), 6.28318530717959)));
                                                    evalcond[1]=((-1.00000000167803)+(new_r22));
                                                    evalcond[2]=new_r20;
                                                    evalcond[3]=new_r21;
                                                    evalcond[4]=((-1.00000000167803)*(new_r20));
                                                    evalcond[5]=((-1.00000000167803)*(new_r21));
                                                    evalcond[6]=((1.00000000000000)+(((-1.00000000167803)*(new_r22))));
                                                    if( IKabs(evalcond[0]) < 0.0000100000000000  && IKabs(evalcond[1]) < 0.0000100000000000  && IKabs(evalcond[2]) < 0.0000100000000000  && IKabs(evalcond[3]) < 0.0000100000000000  && IKabs(evalcond[4]) < 0.0000100000000000  && IKabs(evalcond[5]) < 0.0000100000000000  && IKabs(evalcond[6]) < 0.0000100000000000  )
                                                    {
                                                        {
                                                            IKReal j2array[2], cj2array[2], sj2array[2];
                                                            bool j2valid[2]= {false};
                                                            IKReal x73=IKatan2(new_r02, new_r12);
                                                            j2array[0]=((-1.00000000000000)*(x73));
                                                            sj2array[0]=IKsin(j2array[0]);
                                                            cj2array[0]=IKcos(j2array[0]);
                                                            j2array[1]=((3.14159265358979)+(((-1.00000000000000)*(x73))));
                                                            sj2array[1]=IKsin(j2array[1]);
                                                            cj2array[1]=IKcos(j2array[1]);
                                                            if( j2array[0] > IKPI )
                                                            {
                                                                j2array[0]-=IK2PI;
                                                            }
                                                            else if( j2array[0] < -IKPI )
                                                            {   j2array[0]+=IK2PI;
                                                            }
                                                            j2valid[0] = true;
                                                            if( j2array[1] > IKPI )
                                                            {
                                                                j2array[1]-=IK2PI;
                                                            }
                                                            else if( j2array[1] < -IKPI )
                                                            {   j2array[1]+=IK2PI;
                                                            }
                                                            j2valid[1] = true;
                                                            if( j2valid[0] && j2valid[1] && IKabs(cj2array[0]-cj2array[1]) < 0.0001 && IKabs(sj2array[0]-sj2array[1]) < 0.0001 )
                                                            {
                                                                j2valid[1]=false;
                                                            }
                                                            for(int ij2 = 0; ij2 < 2; ++ij2)
                                                            {
                                                                if( !j2valid[ij2] )
                                                                {
                                                                    continue;
                                                                }
                                                                j2 = j2array[ij2];
                                                                cj2 = cj2array[ij2];
                                                                sj2 = sj2array[ij2];

                                                                {
                                                                    IKReal j4array[1], cj4array[1], sj4array[1];
                                                                    bool j4valid[1]= {false};
                                                                    j4array[0]=IKatan2(((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))), ((((new_r10)*(sj2)))+(((cj2)*(new_r00)))));
                                                                    sj4array[0]=IKsin(j4array[0]);
                                                                    cj4array[0]=IKcos(j4array[0]);
                                                                    if( j4array[0] > IKPI )
                                                                    {
                                                                        j4array[0]-=IK2PI;
                                                                    }
                                                                    else if( j4array[0] < -IKPI )
                                                                    {   j4array[0]+=IK2PI;
                                                                    }
                                                                    j4valid[0] = true;
                                                                    for(int ij4 = 0; ij4 < 1; ++ij4)
                                                                    {
                                                                        if( !j4valid[ij4] )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        j4 = j4array[ij4];
                                                                        cj4 = cj4array[ij4];
                                                                        sj4 = sj4array[ij4];

                                                                        {
                                                                            vsolutions.push_back(IKSolution());
                                                                            IKSolution& solution = vsolutions.back();
                                                                            solution.basesol.resize(6);
                                                                            solution.basesol[0].foffset = j2;
                                                                            solution.basesol[1].foffset = j3;
                                                                            solution.basesol[2].foffset = j4;
                                                                            solution.basesol[3].foffset = j5;
                                                                            solution.basesol[4].foffset = j6;
                                                                            solution.basesol[5].foffset = j7;
                                                                            solution.vfree.resize(0);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    } else
                                                    {
                                                        if( 1 )
                                                        {
                                                            continue;

                                                        } else
                                                        {
                                                        }
                                                    }
                                                }
                                            }

                                        } else
                                        {
                                            {
                                                IKReal j2array[1], cj2array[1], sj2array[1];
                                                bool j2valid[1]= {false};
                                                IKReal x74=((0.707106781186548)*(cj3)*(new_r00)*(new_r02));
                                                IKReal x75=((0.707106781186548)*(new_r10)*(new_r12)*(sj3));
                                                IKReal x76=((0.707106781186548)*(cj3)*(new_r10)*(new_r12));
                                                IKReal x77=((0.707106781186548)*(new_r00)*(new_r02)*(sj3));
                                                IKReal x78=((x77)+(x76)+(x75)+(x74));
                                                IKReal x79=((0.707106781186548)*(cj3)*(new_r20));
                                                IKReal x80=((0.707106781186548)*(new_r20)*(sj3));
                                                IKReal x81=((x79)+(((-1.00000000000000)*(x80))));
                                                j2array[0]=IKatan2(((-1.00000000000000)*(new_r02)*(x81)*(((IKabs(x78) != 0)?((IKReal)1/(x78)):(IKReal)1.0e30))), ((new_r12)*(x81)*(((IKabs(x78) != 0)?((IKReal)1/(x78)):(IKReal)1.0e30))));
                                                sj2array[0]=IKsin(j2array[0]);
                                                cj2array[0]=IKcos(j2array[0]);
                                                if( j2array[0] > IKPI )
                                                {
                                                    j2array[0]-=IK2PI;
                                                }
                                                else if( j2array[0] < -IKPI )
                                                {   j2array[0]+=IK2PI;
                                                }
                                                j2valid[0] = true;
                                                for(int ij2 = 0; ij2 < 1; ++ij2)
                                                {
                                                    if( !j2valid[ij2] )
                                                    {
                                                        continue;
                                                    }
                                                    j2 = j2array[ij2];
                                                    cj2 = cj2array[ij2];
                                                    sj2 = sj2array[ij2];

                                                    {
                                                        IKReal j4array[1], cj4array[1], sj4array[1];
                                                        bool j4valid[1]= {false};
                                                        j4array[0]=IKatan2(((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))), ((((new_r10)*(sj2)))+(((cj2)*(new_r00)))));
                                                        sj4array[0]=IKsin(j4array[0]);
                                                        cj4array[0]=IKcos(j4array[0]);
                                                        if( j4array[0] > IKPI )
                                                        {
                                                            j4array[0]-=IK2PI;
                                                        }
                                                        else if( j4array[0] < -IKPI )
                                                        {   j4array[0]+=IK2PI;
                                                        }
                                                        j4valid[0] = true;
                                                        for(int ij4 = 0; ij4 < 1; ++ij4)
                                                        {
                                                            if( !j4valid[ij4] )
                                                            {
                                                                continue;
                                                            }
                                                            j4 = j4array[ij4];
                                                            cj4 = cj4array[ij4];
                                                            sj4 = sj4array[ij4];

                                                            {
                                                                vsolutions.push_back(IKSolution());
                                                                IKSolution& solution = vsolutions.back();
                                                                solution.basesol.resize(6);
                                                                solution.basesol[0].foffset = j2;
                                                                solution.basesol[1].foffset = j3;
                                                                solution.basesol[2].foffset = j4;
                                                                solution.basesol[3].foffset = j5;
                                                                solution.basesol[4].foffset = j6;
                                                                solution.basesol[5].foffset = j7;
                                                                solution.vfree.resize(0);
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                        }

                                    }

                                } else
                                {
                                    {
                                        IKReal j2array[1], cj2array[1], sj2array[1];
                                        bool j2valid[1]= {false};
                                        IKReal x82=(new_r12)*(new_r12);
                                        IKReal x83=(new_r02)*(new_r02);
                                        IKReal x84=((x82)+(x83));
                                        IKReal x85=((0.707106781186548)*(sj3));
                                        IKReal x86=((0.707106781186548)*(cj3));
                                        IKReal x87=((x86)+(x85));
                                        IKReal x88=((-1.00000000000000)*(x87));
                                        j2array[0]=IKatan2(((new_r02)*(x88)*(((IKabs(x84) != 0)?((IKReal)1/(x84)):(IKReal)1.0e30))), ((-1.00000000000000)*(new_r12)*(x88)*(((IKabs(x84) != 0)?((IKReal)1/(x84)):(IKReal)1.0e30))));
                                        sj2array[0]=IKsin(j2array[0]);
                                        cj2array[0]=IKcos(j2array[0]);
                                        if( j2array[0] > IKPI )
                                        {
                                            j2array[0]-=IK2PI;
                                        }
                                        else if( j2array[0] < -IKPI )
                                        {   j2array[0]+=IK2PI;
                                        }
                                        j2valid[0] = true;
                                        for(int ij2 = 0; ij2 < 1; ++ij2)
                                        {
                                            if( !j2valid[ij2] )
                                            {
                                                continue;
                                            }
                                            j2 = j2array[ij2];
                                            cj2 = cj2array[ij2];
                                            sj2 = sj2array[ij2];

                                            {
                                                IKReal j4array[1], cj4array[1], sj4array[1];
                                                bool j4valid[1]= {false};
                                                j4array[0]=IKatan2(((((-1.00000000000000)*(cj2)*(new_r01)))+(((-1.00000000000000)*(new_r11)*(sj2)))), ((((new_r10)*(sj2)))+(((cj2)*(new_r00)))));
                                                sj4array[0]=IKsin(j4array[0]);
                                                cj4array[0]=IKcos(j4array[0]);
                                                if( j4array[0] > IKPI )
                                                {
                                                    j4array[0]-=IK2PI;
                                                }
                                                else if( j4array[0] < -IKPI )
                                                {   j4array[0]+=IK2PI;
                                                }
                                                j4valid[0] = true;
                                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                                {
                                                    if( !j4valid[ij4] )
                                                    {
                                                        continue;
                                                    }
                                                    j4 = j4array[ij4];
                                                    cj4 = cj4array[ij4];
                                                    sj4 = sj4array[ij4];

                                                    {
                                                        vsolutions.push_back(IKSolution());
                                                        IKSolution& solution = vsolutions.back();
                                                        solution.basesol.resize(6);
                                                        solution.basesol[0].foffset = j2;
                                                        solution.basesol[1].foffset = j3;
                                                        solution.basesol[2].foffset = j4;
                                                        solution.basesol[3].foffset = j5;
                                                        solution.basesol[4].foffset = j6;
                                                        solution.basesol[5].foffset = j7;
                                                        solution.vfree.resize(0);
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                            }

                        } else
                        {
                            {
                                IKReal j4array[1], cj4array[1], sj4array[1];
                                bool j4valid[1]= {false};
                                IKReal x89=((0.707106781186548)*(sj3));
                                IKReal x90=((0.707106781186548)*(cj3));
                                IKReal x91=((x89)+(x90));
                                IKReal x92=((IKabs(x91) != 0)?((IKReal)1/(x91)):(IKReal)1.0e30);
                                j4array[0]=IKatan2(((-1.00000000000000)*(new_r20)*(x92)), ((-1.00000000000000)*(new_r21)*(x92)));
                                sj4array[0]=IKsin(j4array[0]);
                                cj4array[0]=IKcos(j4array[0]);
                                if( j4array[0] > IKPI )
                                {
                                    j4array[0]-=IK2PI;
                                }
                                else if( j4array[0] < -IKPI )
                                {   j4array[0]+=IK2PI;
                                }
                                j4valid[0] = true;
                                for(int ij4 = 0; ij4 < 1; ++ij4)
                                {
                                    if( !j4valid[ij4] )
                                    {
                                        continue;
                                    }
                                    j4 = j4array[ij4];
                                    cj4 = cj4array[ij4];
                                    sj4 = sj4array[ij4];

                                    {
                                        IKReal dummyeval[1];
                                        dummyeval[0]=((((-1.00000000000000)*(new_r02)*(new_r11)))+(((new_r01)*(new_r12))));
                                        if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                        {
                                            {
                                                IKReal dummyeval[1];
                                                dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r12)))+(((new_r02)*(new_r10))));
                                                if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                                {
                                                    {
                                                        IKReal dummyeval[1];
                                                        dummyeval[0]=((((-1.00000000000000)*(new_r00)*(new_r11)))+(((new_r01)*(new_r10))));
                                                        if( IKabs(dummyeval[0]) < 0.0000100000000000  )
                                                        {
                                                            continue;

                                                        } else
                                                        {
                                                            {
                                                                IKReal j2array[1], cj2array[1], sj2array[1];
                                                                bool j2valid[1]= {false};
                                                                IKReal x93=((new_r00)*(new_r11));
                                                                IKReal x94=((new_r01)*(new_r10));
                                                                j2array[0]=IKatan2(((((IKabs(((x94)+(((-1.00000000000000)*(x93))))) != 0)?((IKReal)1/(((x94)+(((-1.00000000000000)*(x93)))))):(IKReal)1.0e30))*(((((cj4)*(new_r01)))+(((new_r00)*(sj4)))))), ((((IKabs(((x93)+(((-1.00000000000000)*(x94))))) != 0)?((IKReal)1/(((x93)+(((-1.00000000000000)*(x94)))))):(IKReal)1.0e30))*(((((new_r10)*(sj4)))+(((cj4)*(new_r11)))))));
                                                                sj2array[0]=IKsin(j2array[0]);
                                                                cj2array[0]=IKcos(j2array[0]);
                                                                if( j2array[0] > IKPI )
                                                                {
                                                                    j2array[0]-=IK2PI;
                                                                }
                                                                else if( j2array[0] < -IKPI )
                                                                {   j2array[0]+=IK2PI;
                                                                }
                                                                j2valid[0] = true;
                                                                for(int ij2 = 0; ij2 < 1; ++ij2)
                                                                {
                                                                    if( !j2valid[ij2] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j2 = j2array[ij2];
                                                                    cj2 = cj2array[ij2];
                                                                    sj2 = sj2array[ij2];

                                                                    {
                                                                        vsolutions.push_back(IKSolution());
                                                                        IKSolution& solution = vsolutions.back();
                                                                        solution.basesol.resize(6);
                                                                        solution.basesol[0].foffset = j2;
                                                                        solution.basesol[1].foffset = j3;
                                                                        solution.basesol[2].foffset = j4;
                                                                        solution.basesol[3].foffset = j5;
                                                                        solution.basesol[4].foffset = j6;
                                                                        solution.basesol[5].foffset = j7;
                                                                        solution.vfree.resize(0);
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }

                                                } else
                                                {
                                                    {
                                                        IKReal j2array[1], cj2array[1], sj2array[1];
                                                        bool j2valid[1]= {false};
                                                        IKReal x95=((new_r00)*(new_r12));
                                                        IKReal x96=((new_r02)*(new_r10));
                                                        j2array[0]=IKatan2(((cj4)*(new_r02)*(((IKabs(((x96)+(((-1.00000000000000)*(x95))))) != 0)?((IKReal)1/(((x96)+(((-1.00000000000000)*(x95)))))):(IKReal)1.0e30))), ((cj4)*(new_r12)*(((IKabs(((x95)+(((-1.00000000000000)*(x96))))) != 0)?((IKReal)1/(((x95)+(((-1.00000000000000)*(x96)))))):(IKReal)1.0e30))));
                                                        sj2array[0]=IKsin(j2array[0]);
                                                        cj2array[0]=IKcos(j2array[0]);
                                                        if( j2array[0] > IKPI )
                                                        {
                                                            j2array[0]-=IK2PI;
                                                        }
                                                        else if( j2array[0] < -IKPI )
                                                        {   j2array[0]+=IK2PI;
                                                        }
                                                        j2valid[0] = true;
                                                        for(int ij2 = 0; ij2 < 1; ++ij2)
                                                        {
                                                            if( !j2valid[ij2] )
                                                            {
                                                                continue;
                                                            }
                                                            j2 = j2array[ij2];
                                                            cj2 = cj2array[ij2];
                                                            sj2 = sj2array[ij2];

                                                            {
                                                                vsolutions.push_back(IKSolution());
                                                                IKSolution& solution = vsolutions.back();
                                                                solution.basesol.resize(6);
                                                                solution.basesol[0].foffset = j2;
                                                                solution.basesol[1].foffset = j3;
                                                                solution.basesol[2].foffset = j4;
                                                                solution.basesol[3].foffset = j5;
                                                                solution.basesol[4].foffset = j6;
                                                                solution.basesol[5].foffset = j7;
                                                                solution.vfree.resize(0);
                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        } else
                                        {
                                            {
                                                IKReal j2array[1], cj2array[1], sj2array[1];
                                                bool j2valid[1]= {false};
                                                IKReal x97=((new_r02)*(new_r11));
                                                IKReal x98=((new_r01)*(new_r12));
                                                j2array[0]=IKatan2(((new_r02)*(sj4)*(((IKabs(((x98)+(((-1.00000000000000)*(x97))))) != 0)?((IKReal)1/(((x98)+(((-1.00000000000000)*(x97)))))):(IKReal)1.0e30))), ((new_r12)*(sj4)*(((IKabs(((x97)+(((-1.00000000000000)*(x98))))) != 0)?((IKReal)1/(((x97)+(((-1.00000000000000)*(x98)))))):(IKReal)1.0e30))));
                                                sj2array[0]=IKsin(j2array[0]);
                                                cj2array[0]=IKcos(j2array[0]);
                                                if( j2array[0] > IKPI )
                                                {
                                                    j2array[0]-=IK2PI;
                                                }
                                                else if( j2array[0] < -IKPI )
                                                {   j2array[0]+=IK2PI;
                                                }
                                                j2valid[0] = true;
                                                for(int ij2 = 0; ij2 < 1; ++ij2)
                                                {
                                                    if( !j2valid[ij2] )
                                                    {
                                                        continue;
                                                    }
                                                    j2 = j2array[ij2];
                                                    cj2 = cj2array[ij2];
                                                    sj2 = sj2array[ij2];

                                                    {
                                                        vsolutions.push_back(IKSolution());
                                                        IKSolution& solution = vsolutions.back();
                                                        solution.basesol.resize(6);
                                                        solution.basesol[0].foffset = j2;
                                                        solution.basesol[1].foffset = j3;
                                                        solution.basesol[2].foffset = j4;
                                                        solution.basesol[3].foffset = j5;
                                                        solution.basesol[4].foffset = j6;
                                                        solution.basesol[5].foffset = j7;
                                                        solution.vfree.resize(0);
                                                    }
                                                }
                                            }

                                        }

                                    }
                                }
                            }

                        }

                    }
                }
            }
        }
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
    IKSolver solver;
    return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() {
    return "<kinbody:KinBody - nao (bfc361d52152dbafa1f8ef25562befa9)>";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]);
    eerot[1] = atof(argv[2]);
    eerot[2] = atof(argv[3]);
    eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]);
    eerot[4] = atof(argv[6]);
    eerot[5] = atof(argv[7]);
    eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]);
    eerot[7] = atof(argv[10]);
    eerot[8] = atof(argv[11]);
    eetrans[2] = atof(argv[12]);
    for(size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
